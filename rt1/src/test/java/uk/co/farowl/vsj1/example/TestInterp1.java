package uk.co.farowl.vsj1.example;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.junit.Test;

import uk.co.farowl.vsj1.TreePython.AbstractVisitor;
import uk.co.farowl.vsj1.TreePython.Node;
import uk.co.farowl.vsj1.TreePython.Visitor;
import uk.co.farowl.vsj1.TreePython.arg;
import uk.co.farowl.vsj1.TreePython.arguments;
import uk.co.farowl.vsj1.TreePython.expr;
import uk.co.farowl.vsj1.TreePython.expr_context;
import uk.co.farowl.vsj1.TreePython.keyword;
import uk.co.farowl.vsj1.TreePython.mod;
import uk.co.farowl.vsj1.TreePython.operator;
import uk.co.farowl.vsj1.TreePython.stmt;
import uk.co.farowl.vsj1.TreePython.type_ignore;
import uk.co.farowl.vsj1.TreePython.unaryop;

/**
 * This test program exercises prototype code for determining the scope,
 * therefore the type of storage and access, proper to names used in a
 * Python program. In a full implementation, these operations take place in
 * the compiler, after parsing and before code generation. Here we study
 * them in isolation using code represented as an AST, generated by a
 * CPython program, and we compare the results of our analysis with the
 * symbol tables also exposed by CPython.
 */
public class TestInterp1 {

    /**
     * Structure used to hold the reference correct result, generated by
     * <code>src/test/python/symtable_testgen.py</code>, by compiling
     * examples of nested code to their symbol tables. We compare to this
     * the result of supposedly equivalent reasoning performed locally in
     * the test program on the AST of the same Python source.
     */
    private static class RefSymbol {

        final String name;
        final SymbolTable.ScopeType scope;
        final boolean is_assigned;
        final boolean is_declared_global;
        final boolean is_free;
        final boolean is_global;
        final boolean is_imported;
        final boolean is_local;
        final boolean is_namespace;
        final boolean is_parameter;
        final boolean is_referenced;

        RefSymbol(String name, SymbolTable.ScopeType scope,
                boolean is_assigned, boolean is_declared_global,
                boolean is_free, boolean is_global, boolean is_imported,
                boolean is_local, boolean is_namespace,
                boolean is_parameter, boolean is_referenced) {
            super();
            this.name = name;
            this.scope = scope;
            this.is_assigned = is_assigned;
            this.is_declared_global = is_declared_global;
            this.is_free = is_free;
            this.is_global = is_global;
            this.is_imported = is_imported;
            this.is_local = is_local;
            this.is_namespace = is_namespace;
            this.is_parameter = is_parameter;
            this.is_referenced = is_referenced;
        }
    }

    /**
     * Take the AST for a Python program with nested block scopes and
     * generate the symbol tables from it. Compare this with symbol tables
     * dumped from a CPython compilation.
     *
     * @param module AST of program to compile
     * @param ref dump of symbol tables from CPython compilation
     */
    private void checkExample(mod module, RefSymbol[][] ref) {

        // Build symbol table from test AST
        SymbolVisitor visitor = new SymbolVisitor(module, "<example>");
        module.accept(visitor);
        final Map<Node, SymbolTable> blockMap = visitor.getBlockMap();

        // Complete scope deductions for test AST in each SymbolTable
        blockMap.get(module).resolveSymbolsRecursively();

        // Collect generated symbol tables in a list (pre-order walk)
        final List<SymbolTable> stlist = new ArrayList<>();
        Visitor<Void> symbolTableLister = new AbstractVisitor<Void>() {

            @Override
            public Void visit_Module(mod.Module module) {
                stlist.add(blockMap.get(module));
                return super.visit_Module(module);
            }

            @Override
            public Void visit_FunctionDef(stmt.FunctionDef functionDef) {
                stlist.add(blockMap.get(functionDef));
                return super.visit_FunctionDef(functionDef);
            }

        };

        module.accept(symbolTableLister);

        // The supplied ref data tells us the expected number of tables
        final int N = ref.length;
        assertEquals("Number of blocks", N, stlist.size());

        /*
         * The tables in the symbol table list we made from the AST, and
         * those in ref are (hopefully) in the same order because the test
         * material is generated by a similar pre-order walk.
         */
        Iterator<SymbolTable> tableIter = stlist.iterator();

        for (RefSymbol[] block : ref) {
            SymbolTable st = tableIter.next();
            Set<String> symlist = st.get_identifiers();
            assertEquals("Number of symbols in block", block.length,
                    symlist.size());
            for (RefSymbol r : block) {
                String name = r.name;
                SymbolTable.Symbol s = st.symbols.get(name);
                name = st.name + ":" + name;
                assertEquals(name + " scope", r.scope, s.scope);
                assertEquals(name + " is_assigned", r.is_assigned,
                        s.is_assigned());
                assertEquals(name + " is_declared_global",
                        r.is_declared_global, s.is_declared_global());
                assertEquals(name + " is_free", r.is_free, s.is_free());
                assertEquals(name + " is_global", r.is_global,
                        s.is_global());
                assertEquals(name + " is_imported", r.is_imported,
                        s.is_imported());
                assertEquals(name + " is_local", r.is_local, s.is_local());
                assertEquals(name + " is_namespace", r.is_namespace,
                        s.is_namespace());
                assertEquals(name + " is_parameter", r.is_parameter,
                        s.is_parameter());
                assertEquals(name + " is_referenced", r.is_referenced,
                        s.is_referenced());
            }
        }
    }

    /**
     * Patterned after Python <code>symtable.SymbolTable</code>, this class
     * holds symbol (name) information for one block and its lexically
     * contained blocks. This is also effectively a
     * <code>PySTEntryObject</code> from CPython <code>symtable.h</code>.
     * We have no need for a separately compiled <code>_symtable</code>
     * module and raw <code>_table</code> member.
     */
    private static abstract class SymbolTable {

        /** Scopes have a name (the name of the function, class, etc.. */
        final String name;
        /** The symbol table itself. */
        final Map<String, Symbol> symbols;
        /** Enclosing scope or null if and only if this is a module. */
        final SymbolTable parent;
        /** Enclosed scopes. */
        final List<SymbolTable> children;

        /**
         * Construct a scope with the given name and parent. This does not
         * enter the name in the parent symbol table: the caller should do
         * that.
         */
        SymbolTable(String name, SymbolTable parent) {
            this.symbols = new HashMap<>();
            this.parent = parent;
            this.name = name;
            this.children = new ArrayList<>();
        }

        /** Expresses the final decision how the variable is accessed. */
        enum ScopeType {
            LOCAL, GLOBAL_EXPLICIT, GLOBAL_IMPLICIT, FREE, CELL
        }

        /**
         * Make an entry for a name in the symbol table with the given
         * attribute flags, or add the flags to the existing entry.
         */
        Symbol add(String name, int flags) {
            Symbol s = symbols.get(name);
            if (s == null) {
                s = new Symbol(name, flags);
                symbols.put(name, s);
            } else {
                s.flags |= flags;
            }
            return s;
        }

        /**
         * Enter all of these names (useful for global and nonlocal
         * declarations).
         */
        void addAll(Collection<String> names, int flags) {
            for (String name : names) {
                add(name, flags);
            }
        }

        /**
         * Make an entry for a child name space and add it to the the
         * symbol table by name. (If an entry exists by this name already,
         * augment that entry with the name space.)
         */
        Symbol addChild(SymbolTable other) {
            Symbol s = symbols.get(other.name);
            if (s == null) {
                s = new Symbol(other);
                symbols.put(other.name, s);
            } else {
                s.addSpace(other);
                s.flags |= Symbol.ASSIGNED;
            }
            children.add(other);
            return s;
        }

        /**
         * Retrieve the named symbol from this table (or return null if not
         * found).
         */
        @SuppressWarnings("unused")
        Symbol lookup(String name) {
            return symbols.get(name);
        }

        /**
         * The scope within which this is ultimately nested (or itself if a
         * module).
         */
        abstract ModuleSymbolTable getTop();

        /** True if scope is nested (not a module scope). */
        abstract boolean isNested();

        @Override
        public String toString() {
            String type = getClass().getSimpleName();
            return String.format("%s '%s'", type, name);
        }

        Set<String> get_identifiers() {
            return symbols.keySet();
        }

        /**
         * Given a name that is free in a scope interior to this one, look
         * in this scope's symbols for a matching name, and in enclosing
         * scopes until either a binding for the name has been found, or it
         * is proved it cannot be resolved. This free name may have been
         * declared explicitly <code>nonlocal</code> in the original scope
         * or it may just be used but not bound in the original scope.
         *
         * The method returns true if and only if, in the scope where it is
         * found, the name is {@link ScopeType#LOCAL} or
         * {@link ScopeType#CELL}. A side effect of a successful search is
         * to convert the name in the referent scope to
         * {@link ScopeType#CELL}, and in all intervening scopes to
         * {@link ScopeType#FREE}. (In practice, the search will stop as
         * soon as the name is discovered <code>CELL</code> or
         * <code>FREE</code>, implying a previous call has fixed it up from
         * there.)
         */
        abstract boolean fixupFree(String name);

        /**
         * Resolve the symbols in this block to their proper
         * {@link ScopeType}, also fixing-up parent scopes for those found
         * free in this block. This method implements the "second pass"
         * over symbols in the compiler.
         */
        void resolveAllSymbols() {
            for (SymbolTable.Symbol s : symbols.values()) {
                // The use in this block may resolve itself immediately
                if (!s.resolveScope()) {
                    // Not resolved: used free or is explicitly nonlocal
                    if (isNested() && parent.fixupFree(s.name)) {
                        // Appropriate referent exists in outer scopes
                        s.setScope(ScopeType.FREE);
                    } else if ((s.flags & Symbol.NONLOCAL) != 0) {
                        // No cell variable found: but declared non-local
                        throw new IllegalArgumentException(
                                "undefined non-local " + s.name);
                    } else {
                        // No cell variable found: assume global
                        s.setScope(ScopeType.GLOBAL_IMPLICIT);
                    }
                }
            }
        }

        /**
         * Apply {@link #resolveAllSymbols()} to the current scope and then
         * to child scopes recursively. Applied to a module, this completes
         * free variable fix-up for symbols used throughout the program.
         */
        protected void resolveSymbolsRecursively() {
            resolveAllSymbols();
            for (SymbolTable st : children) {
                st.resolveSymbolsRecursively();
            }
        }

        /**
         * Patterned after Python <code>symtable.Symbol</code>, this class
         * holds usage information for one symbol (name) in the block of
         * the symbol table where it is an entry.
         */
        static class Symbol {

            /** Declared global */
            private static final int GLOBAL = 1;
            /** Assigned in block */
            private static final int ASSIGNED = 2;
            /** Appears as formal parameter (function) */
            private static final int PARAMETER = 4;
            /** Declared non-local */
            private static final int NONLOCAL = 8;
            /** Used (referenced) in block */
            private static final int REFERENCED = 0x10;

            // Convenience for testing several kinds of "bound"
            private static final int BOUND = ASSIGNED | PARAMETER;

            /** Symbol name */
            final String name;
            /** Properties collected by scanning the AST for uses. */
            int flags;
            /** The final decision how the variable is accessed. */
            ScopeType scope = null;
            /**
             * When the symbol represents a function body or class, list
             * the name spaces of those scopes here. Note it is possible to
             * have several, and for the symbol to represent other types in
             * the same scope. null if and only if there are no such
             * associated namespaces.
             */
            private List<SymbolTable> namespaces;

            /**
             * Construct a symbol with given initial flags.
             */
            private Symbol(String name, int flags) {
                this.name = name;
                this.flags = flags;
                this.namespaces = Collections.emptyList();
            }

            /**
             * Construct a symbol representing one name space initially.
             */
            Symbol(SymbolTable other) {
                this.name = other.name;
                this.flags = ASSIGNED;
                this.namespaces = Collections.singletonList(other);
            }

            @Override
            public String toString() {
                return "<symbol " + name + ">";
            }

            void addSpace(SymbolTable other) {
                assert name == other.name;
                if (namespaces.isEmpty()) {
                    // First name space
                    namespaces = Collections.singletonList(other);
                } else {
                    if (namespaces.size() == 1) {
                        // Replace singleton list with a mutable one
                        SymbolTable existing = namespaces.get(0);
                        namespaces = new LinkedList<>();
                        namespaces.add(existing);
                    }
                    namespaces.add(other);
                }
            }

            void setScope(ScopeType scope) {
                this.scope = scope;
            }

            /**
             * If possible using local information only, resolve the scope
             * of the name, returning <code>true</code> if the result was
             * definitive. The result is not definitive, and the return is
             * <code>false</code>, when the name is free in this scope, or
             * is explicitly declared <code>nonlocal</code>. In either
             * case, the caller must search enclosing scopes for this name,
             * possibly adding the name free in them or converting the name
             * to {@link ScopeType#CELL} scope in the scope that binds the
             * name.
             *
             * @return false iff we must search enclosing blocks
             */
            boolean resolveScope() {
                if ((flags & GLOBAL) != 0) {
                    scope = ScopeType.GLOBAL_EXPLICIT;
                } else if ((flags & NONLOCAL) != 0) {
                    scope = ScopeType.LOCAL;
                    return false;
                } else if ((flags & BOUND) != 0) {
                    scope = ScopeType.LOCAL; // or CELL ultimately
                }
                return scope != null;
            }

            boolean is_referenced() {
                return (flags & REFERENCED) != 0;
            }

            boolean is_parameter() {
                return (flags & PARAMETER) != 0;
            }

            boolean is_global() {
                return scope == ScopeType.GLOBAL_IMPLICIT
                        || scope == ScopeType.GLOBAL_EXPLICIT;
            }

            boolean is_declared_global() {
                return scope == ScopeType.GLOBAL_EXPLICIT;
            }

            public boolean is_imported() {
                // Imports not supported at the moment
                return false;
            }

            boolean is_local() {
                return (flags & BOUND) != 0;
            }

            boolean is_free() {
                return scope == ScopeType.FREE;
            }

            boolean is_assigned() {
                return (flags & ASSIGNED) != 0;
            }

            boolean is_namespace() {
                /*
                 * Returns true if name binding introduces new namespace.
                 *
                 * If the name is used as the target of a function or class
                 * statement, this will be true.
                 *
                 * Note that a single name can be bound to multiple
                 * objects. If boolean isNamespace() is true, the name may
                 * also be bound to other objects, like an int or list,
                 * that does not introduce a new namespace.
                 */
                return !namespaces.isEmpty();
            }

            /** Return a list of namespaces bound to this name */
            @SuppressWarnings("unused")
            List<SymbolTable> getNamespaces() {
                return namespaces;
            }

            @SuppressWarnings("unused")
            SymbolTable getNamespace() {
                /*
                 * Returns the single namespace bound to this name.
                 *
                 * Raises ValueError if the name is bound to multiple
                 * namespaces or none.
                 */
                if (namespaces.isEmpty()) {
                    throw new IllegalArgumentException(
                            "name is not bound a namespace");
                } else if (namespaces.size() == 1) {
                    return namespaces.get(0);
                } else {
                    throw new IllegalArgumentException(
                            "name is bound to multiple namespaces");
                }
            }
        }
    }

    /**
     * Symbol table representing the scope of a module, that is, the top
     * level of the scope tree.
     */
    private static class ModuleSymbolTable extends SymbolTable {

        @SuppressWarnings("unused")
        private String filename;

        ModuleSymbolTable(mod module, String filename) {
            super("top", null);
            this.filename = filename;
        }

        @Override
        ModuleSymbolTable getTop() {
            return this;
        }

        @Override
        boolean isNested() {
            return false;
        }

        @Override
        boolean fixupFree(String name) {
            // The top cannot be the referent of a non-local name.
            return false;
        }
    }

    /**
     * Symbol table representing the scope of a function body, which cannot
     * therefore be the top level of the scope tree.
     */
    private static class FunctionSymbolTable extends SymbolTable {

        private final ModuleSymbolTable top;

        /**
         * Create nested symbol table from a function declaration in scope
         * that becomes a parent of this table.
         *
         * @param def the function definition
         * @param parent enclosing scope must be non-null
         */
        FunctionSymbolTable(stmt.FunctionDef def, SymbolTable parent) {
            super(def.name, parent);
            this.top = parent.getTop();
        }

        @Override
        ModuleSymbolTable getTop() {
            return top;
        }

        @Override
        boolean isNested() {
            return true;
        }

        @Override
        boolean fixupFree(String name) {
            // Look up in this scope
            SymbolTable.Symbol s = symbols.get(name);
            if (s != null) {
                /*
                 * Found name in this scope: but only CELL, FREE or LOCAL
                 * are allowable.
                 */
                switch (s.scope) {
                    case CELL:
                    case FREE:
                        // Name is CELL here or in an enclosing scope
                        return true;
                    case LOCAL:
                        // Bound here, make it CELL in this scope
                        s.setScope(ScopeType.CELL);
                        return true;
                    default:
                        /*
                         * Any other scope value is not compatible with the
                         * alleged non-local nature of this name in the
                         * original scope.
                         */
                        return false;
                }
            } else {
                /*
                 * The name is not present in this scope. If it can be
                 * found in some enclosing scope then we will add it FREE
                 * here.
                 */
                if (parent.fixupFree(name)) {
                    s = add(name, 0);
                    s.setScope(ScopeType.FREE);
                    return true;
                } else {
                    return false;
                }
            }
        }
    }

    /**
     * Visitor on the AST adding compile-time information to each node
     * about the binding of names. In this version, the information is
     * added externally through a Map created in construction and filled
     * during the traverse.
     */
    private static class SymbolVisitor extends AbstractVisitor<Void> {

        final String filename;

        /** Description of the current block (symbol table). */
        protected SymbolTable current;
        /** Map from nodes that are blocks to their symbols. */
        final Map<Node, SymbolTable> blockMap;

        /**
         * Construct a SymbolVisitor to traverse an AST and fill in
         * information about each block.
         */
        SymbolVisitor(mod module, String filename) {
            this.filename = filename;
            this.blockMap = new HashMap<>();
        }

        /**
         * Get the generated map from nodes to the name-binding information
         * generated by visiting the tree. Only nodes that represent blocks
         * (Module and FunctionDef) will be keys in this map.
         */
        public Map<Node, SymbolTable> getBlockMap() {
            return blockMap;
        }

        /**
         * The visitor is normally applied to a module.
         */
        @Override
        public Void visit_Module(mod.Module module) {
            // Create a symbol table for the scope
            current = new ModuleSymbolTable(module, filename);
            blockMap.put(module, current);
            try {
                // Process the statements in the block
                return super.visit_Module(module);
            } finally {
                // Restore context (should be null!)
                current = current.parent;
            }
        }

        @Override
        public Void visit_FunctionDef(stmt.FunctionDef functionDef) {
            // Start a nested block
            FunctionSymbolTable child =
                    new FunctionSymbolTable(functionDef, current);
            blockMap.put(functionDef, child);
            // Function definition binds the name
            current.addChild(child);
            // Process the statements in the block
            current = child;
            try {
                // Visit children (body may have further FunctionDefs)
                return super.visit_FunctionDef(functionDef);
            } finally {
                // Restore context
                current = current.parent;
            }
        }

        @Override
        public Void visit_Global(stmt.Global global) {
            current.addAll(global.names, SymbolTable.Symbol.GLOBAL);
            // Explicit global declaration counts for the top level too.
            if (current.isNested()) {
                current.getTop().addAll(global.names,
                        SymbolTable.Symbol.GLOBAL);
            }
            return null;
        }

        @Override
        public Void visit_Nonlocal(stmt.Nonlocal nonlocal) {
            current.addAll(nonlocal.names, SymbolTable.Symbol.NONLOCAL);
            return null;
        }

        @Override
        public Void visit_Name(expr.Name name) {
            if (name.ctx == Load) {
                current.add(name.id, SymbolTable.Symbol.REFERENCED);
            } else {
                current.add(name.id, SymbolTable.Symbol.ASSIGNED);
            }
            return null;
        }

        @Override
        public Void visit_arg(arg arg) {// aaaargh!!!
            current.add(arg.arg, SymbolTable.Symbol.PARAMETER);
            return null;
        }

        @Override
        public Void visit_keyword(keyword keyword) {
            current.add(keyword.arg, SymbolTable.Symbol.PARAMETER);
            return keyword.value.accept(this);
        }
    }

    // ------------------------------------------------------------------
    // Literal AST: helper methods
    // ------------------------------------------------------------------

    /**
     * Helper method for the literal AST: create a list from a sequence of
     * arguments.
     *
     * @see #cast(List, Class)
     * @param values array of any object
     * @return list of the same
     */
    private static List<?> list(Object... values) {
        return Arrays.asList(values);
    }

    /**
     * Safely convert a list of objects to a list of a particular element
     * class. This is a helper function for building the AST from literal
     * functions. Wherever a list is provided in the the AST, it will have
     * compile-time type of only <code>List&lt;?&gt;</code>. However, the
     * grammar guarantees it a list of a particular type, according to
     * context. This method builds a list of the required type.
     *
     * @param values the elements, all instances of elementClass.
     * @param elementClass the actual type of the values.
     * @return a copy of the list with given element-type, statically.
     */
    private static <T> List<T> cast(List<?> values,
            Class<T> elementClass) {
        List<T> list = new ArrayList<>(values.size());
        for (Object v : values) {
            list.add(elementClass.cast(v));
        }
        return list;
    }

    // @formatter:off

    private static final operator Add = operator.Add;
    @SuppressWarnings("unused")
    private static final operator Sub = operator.Sub;
    @SuppressWarnings("unused")
    private static final operator Mult = operator.Mult;
    @SuppressWarnings("unused")
    private static final operator Div = operator.Div;
    @SuppressWarnings("unused")
    private static final unaryop UAdd = unaryop.UAdd;
    @SuppressWarnings("unused")
    private static final unaryop USub = unaryop.USub;
    private static final expr_context Load = expr_context.Load;
    private static final expr_context Store = expr_context.Store;

    private static mod Module(List<?> body, List<?> ti) {
        return new mod.Module(cast(body, stmt.class),
                cast(ti, type_ignore.class)); }

    private static stmt FunctionDef(String name, arguments args,
            List<?> body, List<?> decorator_list, expr returns,
            String type_comment) {
        return new stmt.FunctionDef(name, args, cast(body, stmt.class),
                cast(decorator_list, expr.class), returns, type_comment);}
    @SuppressWarnings("unused")
    private static stmt Return(expr value)
        { return new stmt.Return(value); }
    @SuppressWarnings("unused")
    private static stmt Delete(List<?> targets)
        { return new stmt.Delete(cast(targets, expr.class)); }
    private static stmt Assign(List<?> targets, expr value,
            String type_comment) {
        return new stmt.Assign(cast(targets, expr.class), value,
                type_comment); }
    private static stmt Global(List<?> names)
        { return new stmt.Global(cast(names, String.class)); }
    private static stmt Nonlocal(List<?> names)
        { return new stmt.Nonlocal(cast(names, String.class)); }
    @SuppressWarnings("unused")
    private static stmt Expr(expr value)
        { return new stmt.Expr(value); }
    private static stmt Pass()
        { return new stmt.Pass(); }

    private static expr BinOp(expr left, operator op, expr right)
        { return new expr.BinOp(left, op, right); }
    @SuppressWarnings("unused")
    private static expr UnaryOp(unaryop op, expr operand)
        { return new expr.UnaryOp(op, operand); }
    @SuppressWarnings("unused")
    private static expr Call(expr func, List<?> args, List<?> keywords) {
        return new expr.Call(func, cast(args, expr.class),
                cast(keywords, keyword.class)); }
    public static final expr Constant(Object value, String kind)
        { return new expr.Constant(value, kind); }
    private static expr Name(String id, expr_context ctx)
        { return new expr.Name(id, ctx); }

    private static arguments arguments(List<?> posonlyargs, List<?> args,
            arg vararg, List<?> kwonlyargs, List<?> kw_defaults,
            arg kwarg, List<?> defaults) {
        return new arguments(cast(posonlyargs, arg.class), cast(args, arg.class), vararg,
                cast(kwonlyargs, arg.class), cast(kw_defaults, expr.class),
                kwarg, cast(defaults, expr.class));
        }
    // @formatter:on

    // ======= Generated examples ==========
    // Generated by symtable_testgen.py

    @Test
    public void example0010() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     pass
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0010
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example0020() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     pass
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0020
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example0030() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     pass
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0030
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example0110() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     y = x+1
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0110
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example0120() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     y = x+1
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0120
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example0130() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     y = x+1
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0130
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example0210() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     x = 420
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0210
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                false, false, true, false, false, false,
                                false, false, true),},});
    }

    @Test
    public void example0220() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     x = 420
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0220
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example0230() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     x = 420
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0230
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example0240() {
        // @formatter:off
        // def f():
        //     def g():
        //         nonlocal x
        //         x = 4200
        //     x = 420
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Nonlocal(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0240
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                true, false, true, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example0310() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     global x
        //     x = 420
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0310
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example0320() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     global x
        //     x = 420
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0320
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example0330() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     global x
        //     x = 420
        // pass
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Pass()),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example0330
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example1010() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     pass
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1010
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example1020() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     pass
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1020
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example1030() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     pass
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1030
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, true),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example1110() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     y = x+1
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1110
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example1120() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     y = x+1
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1120
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example1130() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     y = x+1
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1130
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, true),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example1210() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     x = 420
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1210
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                false, false, true, false, false, false,
                                false, false, true),},});
    }

    @Test
    public void example1220() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     x = 420
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1220
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example1230() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     x = 420
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1230
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, true),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example1240() {
        // @formatter:off
        // def f():
        //     def g():
        //         nonlocal x
        //         x = 4200
        //     x = 420
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Nonlocal(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1240
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                true, false, true, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example1310() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     global x
        //     x = 420
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1310
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, true),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example1320() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     global x
        //     x = 420
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1320
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, true),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example1330() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     global x
        //     x = 420
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1330
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, true),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example2010() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     pass
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2010
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example2020() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     pass
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2020
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example2030() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     pass
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2030
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example2110() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     y = x+1
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2110
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example2120() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     y = x+1
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2120
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example2130() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     y = x+1
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2130
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example2210() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     x = 420
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2210
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                false, false, true, false, false, false,
                                false, false, true),},});
    }

    @Test
    public void example2220() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     x = 420
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2220
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example2230() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     x = 420
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2230
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example2240() {
        // @formatter:off
        // def f():
        //     def g():
        //         nonlocal x
        //         x = 4200
        //     x = 420
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Nonlocal(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2240
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                true, false, true, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example2310() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     global x
        //     x = 420
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2310
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example2320() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     global x
        //     x = 420
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2320
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example2330() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     global x
        //     x = 420
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2330
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example3010() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     pass
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3010
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example3020() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     pass
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3020
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example3030() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     pass
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Pass()),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3030
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example3110() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     y = x+1
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3110
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example3120() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     y = x+1
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3120
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example3130() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     y = x+1
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3130
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example3210() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     x = 420
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3210
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                false, false, true, false, false, false,
                                false, false, true),},});
    }

    @Test
    public void example3220() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     x = 420
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3220
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example3230() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     x = 420
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3230
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example3240() {
        // @formatter:off
        // def f():
        //     def g():
        //         nonlocal x
        //         x = 4200
        //     x = 420
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Nonlocal(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3240
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                true, false, true, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example3310() {
        // @formatter:off
        // def f():
        //     def g():
        //         y = x+1
        //     global x
        //     x = 420
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3310
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example3320() {
        // @formatter:off
        // def f():
        //     def g():
        //         x = 4200
        //     global x
        //     x = 420
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3320
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example3330() {
        // @formatter:off
        // def f():
        //     def g():
        //         global x
        //         x = 4200
        //     global x
        //     x = 420
        // global x
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(Global(list("x")), Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Global(list("x")),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Global(list("x")),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example3330
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},});
    }

    @Test
    public void example1101() {
        // @formatter:off
        // def f():
        //     def g():
        //         def h():
        //             y = x+1
        //         pass
        //     y = x+1
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(
                        FunctionDef(
                            "h",
                            arguments(list(), list(), null, list(), list(), null, list()),
                            list(
                                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                            list(),
                            null,
                            null),
                        Pass()),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1101
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("h", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for h in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example1131() {
        // @formatter:off
        // def f():
        //     def g():
        //         def h():
        //             y = x+1
        //         global x
        //         x = 4200
        //     y = x+1
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(
                        FunctionDef(
                            "h",
                            arguments(list(), list(), null, list(), list(), null, list()),
                            list(
                                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                            list(),
                            null,
                            null),
                        Global(list("x")),
                        Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1131
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, true),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("h", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for h in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example1201() {
        // @formatter:off
        // def f():
        //     def g():
        //         def h():
        //             y = x+1
        //         pass
        //     x = 420
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(
                        FunctionDef(
                            "h",
                            arguments(list(), list(), null, list(), list(), null, list()),
                            list(
                                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                            list(),
                            null,
                            null),
                        Pass()),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1201
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("h", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                false, false, true, false, false, false,
                                false, false, false),},
                { // <Function SymbolTable for h in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                false, false, true, false, false, false,
                                false, false, true),},});
    }

    @Test
    public void example1204() {
        // @formatter:off
        // def f():
        //     def g():
        //         def h():
        //             nonlocal x
        //             x = 42000
        //         pass
        //     x = 420
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(
                        FunctionDef(
                            "h",
                            arguments(list(), list(), null, list(), list(), null, list()),
                            list(Nonlocal(list("x")), Assign(list(Name("x", Store)), Constant(42000, null), null)),
                            list(),
                            null,
                            null),
                        Pass()),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1204
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("h", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                false, false, true, false, false, false,
                                false, false, false),},
                { // <Function SymbolTable for h in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                true, false, true, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example1231() {
        // @formatter:off
        // def f():
        //     def g():
        //         def h():
        //             y = x+1
        //         global x
        //         x = 4200
        //     x = 420
        // y = x+1
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(
                        FunctionDef(
                            "h",
                            arguments(list(), list(), null, list(), list(), null, list()),
                            list(
                                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                            list(),
                            null,
                            null),
                        Global(list("x")),
                        Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example1231
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                false, true, false, true, false, false,
                                false, false, true),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("h", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for h in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example2101() {
        // @formatter:off
        // def f():
        //     def g():
        //         def h():
        //             y = x+1
        //         pass
        //     y = x+1
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(
                        FunctionDef(
                            "h",
                            arguments(list(), list(), null, list(), list(), null, list()),
                            list(
                                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                            list(),
                            null,
                            null),
                        Pass()),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2101
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("h", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),},
                { // <Function SymbolTable for h in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example2131() {
        // @formatter:off
        // def f():
        //     def g():
        //         def h():
        //             y = x+1
        //         global x
        //         x = 4200
        //     y = x+1
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(
                        FunctionDef(
                            "h",
                            arguments(list(), list(), null, list(), list(), null, list()),
                            list(
                                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                            list(),
                            null,
                            null),
                        Global(list("x")),
                        Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2131
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("h", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for h in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    @Test
    public void example2201() {
        // @formatter:off
        // def f():
        //     def g():
        //         def h():
        //             y = x+1
        //         pass
        //     x = 420
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(
                        FunctionDef(
                            "h",
                            arguments(list(), list(), null, list(), list(), null, list()),
                            list(
                                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                            list(),
                            null,
                            null),
                        Pass()),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2201
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("h", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                false, false, true, false, false, false,
                                false, false, false),},
                { // <Function SymbolTable for h in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                false, false, true, false, false, false,
                                false, false, true),},});
    }

    @Test
    public void example2204() {
        // @formatter:off
        // def f():
        //     def g():
        //         def h():
        //             nonlocal x
        //             x = 42000
        //         pass
        //     x = 420
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(
                        FunctionDef(
                            "h",
                            arguments(list(), list(), null, list(), list(), null, list()),
                            list(Nonlocal(list("x")), Assign(list(Name("x", Store)), Constant(42000, null), null)),
                            list(),
                            null,
                            null),
                        Pass()),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2204
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.CELL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("h", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                false, false, true, false, false, false,
                                false, false, false),},
                { // <Function SymbolTable for h in <module>>
                        new RefSymbol("x", SymbolTable.ScopeType.FREE,
                                true, false, true, false, false, true,
                                false, false, false),},});
    }

    @Test
    public void example2231() {
        // @formatter:off
        // def f():
        //     def g():
        //         def h():
        //             y = x+1
        //         global x
        //         x = 4200
        //     x = 420
        // x = 42
        mod module = Module(
    list(
        FunctionDef(
            "f",
            arguments(list(), list(), null, list(), list(), null, list()),
            list(
                FunctionDef(
                    "g",
                    arguments(list(), list(), null, list(), list(), null, list()),
                    list(
                        FunctionDef(
                            "h",
                            arguments(list(), list(), null, list(), list(), null, list()),
                            list(
                                Assign(list(Name("y", Store)), BinOp(Name("x", Load), Add, Constant(1, null)), null)),
                            list(),
                            null,
                            null),
                        Global(list("x")),
                        Assign(list(Name("x", Store)), Constant(4200, null), null)),
                    list(),
                    null,
                    null),
                Assign(list(Name("x", Store)), Constant(420, null), null)),
            list(),
            null,
            null),
        Assign(list(Name("x", Store)), Constant(42, null), null)),
    list())
        ;
        // @formatter:on

        checkExample(module, new RefSymbol[][] { // example2231
                { // <SymbolTable for top in <module>>
                        new RefSymbol("f", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for f in <module>>
                        new RefSymbol("g", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),},
                { // <Function SymbolTable for g in <module>>
                        new RefSymbol("h", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                true, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_EXPLICIT,
                                true, true, false, true, false, true,
                                false, false, false),},
                { // <Function SymbolTable for h in <module>>
                        new RefSymbol("y", SymbolTable.ScopeType.LOCAL,
                                true, false, false, false, false, true,
                                false, false, false),
                        new RefSymbol("x",
                                SymbolTable.ScopeType.GLOBAL_IMPLICIT,
                                false, false, false, true, false, false,
                                false, false, true),},});
    }

    // ======= End of generated examples ==========
}
