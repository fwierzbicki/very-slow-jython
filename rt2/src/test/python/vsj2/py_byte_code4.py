# Generate examples for the bytecode interpreter

import os
from contextlib import closing
from vsj2.exparser import LineToken, Lines
from vsj2.srcgen import PyObjectTestEmitter, PyObjectEmitter4


# ------------------------- Main Program -------------------------


def generate(test, writer=None):
    """Generate Java code to test one program example"""
    # Strip blank lines from end of example
    body = test.body
    while len(body[-1]) == 0:
        body.pop(-1)
    # Generate the text of a test based on this example
    with closing(PyObjectTestEmitter(test, writer)) as e:
        e.emit_test_material()
        e.emit_test_cases()
        e.emit_line("")


def main(examples):
    print("    // from {}\n".format(os.path.basename(examples)))
    # Open the input and wrap in a parser
    with closing(Lines(open(examples))) as lines:
        # Anything before the first heading is not part of any test
        lines.parse_preamble()
        # Each test in the file produces a code object and one or more tests
        while lines.kind() != LineToken.EOF:
            test = lines.parse_test()
            generate(test, PyObjectEmitter4())


if __name__ == "__main__":
    # Derive the examples file name from this one
    print("    // Code generated by {}".format(os.path.basename(__file__)))
    main(".ex".join(os.path.splitext(__file__)))
