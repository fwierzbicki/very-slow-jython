package uk.co.farowl.vsj2.evo3;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import org.junit.jupiter.api.Test;

/**
 * Continues the test illustrating a naive emulation using
 * {@code MethodHandle} of CPython's approach to type objects. In
 * {@link PyByteCode2} we demonstrated a type system capable of
 * co-ordinating unary and binary operations. We now extend this (using
 * the same classes) to a simple loops over a sequence.
 */
class PyByteCode4 {

    @Test
    void test_builtin_mro() {

        PyType OBJECT = PyBaseObject.TYPE;
        PyType INT = PyLong.TYPE;
        PyType FLOAT = PyFloat.TYPE;
        PyType BOOL = PyBool.TYPE;

        // object
        PyType t = Py.object().getType();
        assertNull(t.getBase());
        assertArrayEquals(new PyType[] {}, t.getBases());
        assertArrayEquals(new PyType[] {OBJECT}, t.getMRO());

        // int
        t = Py.val(1).getType();
        assertEquals(OBJECT, t.getBase());
        assertArrayEquals(new PyType[] {OBJECT}, t.getBases());
        assertArrayEquals(new PyType[] {INT, OBJECT}, t.getMRO());

        // float
        t = Py.val(1.0).getType();
        assertEquals(OBJECT, t.getBase());
        assertArrayEquals(new PyType[] {OBJECT}, t.getBases());
        assertArrayEquals(new PyType[] {FLOAT, OBJECT}, t.getMRO());

        // bool
        t = Py.True.getType();
        assertEquals(INT, t.getBase());
        assertArrayEquals(new PyType[] {INT}, t.getBases());
        assertArrayEquals(new PyType[] {BOOL, INT, OBJECT}, t.getMRO());
    }

    //@Test
    void test_exceptions_mro() {

        PyType OBJECT = PyBaseObject.TYPE;
        PyType BASE_EXCEPTION = PyException.TYPE;
        PyType EXCEPTION = PyException.TYPE;
        PyType TYPE_ERROR = TypeError.TYPE;

        // TypeError
        PyType t = new TypeError("").getType();
        assertEquals(OBJECT, t.getBase());
        assertArrayEquals(new PyType[] {EXCEPTION}, t.getBases());
        PyType[] exp = new PyType[] {TYPE_ERROR, EXCEPTION,
                BASE_EXCEPTION, OBJECT};
        assertArrayEquals(exp, t.getMRO());
    }

    // --------------------- Generated Tests -----------------------
    // Code generated by py_byte_code4_evo3.py
    // from py_byte_code4.ex.py

    // Nothing to see here as py_byte_code4.ex.py is currently empty.
}
