package uk.co.farowl.vsj2.evo3;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

/**
 * Continues the test illustrating a naive emulation using
 * {@code MethodHandle} of CPython's approach to type objects. The
 * present tests exercise function definition and call.
 */
class PyByteCode5 {

    @SuppressWarnings("unused")
    private static class LenCallable implements PyObject {

        static final PyType TYPE = PyType.fromSpec(
                new PyType.Spec("00LenCallable", LenCallable.class));

        @Override
        public PyType getType() { return TYPE; }

        static PyObject tp_call(LenCallable self, PyTuple args,
                PyDictionary kwargs) throws Throwable {
            PyObject v = Sequence.getItem(args, 0);
            return Py.val(Abstract.size(v));
        }
    }

    @Test
    void abstract_call() throws TypeError, Throwable {
        PyObject callable = new LenCallable();
        PyObject args = Py.tuple(Py.str("hello"));
        PyObject kwargs = Py.dict();
        PyObject result = Callables.call(callable, args, kwargs);
        assertEquals(Py.val(5), result);
    }

    // --------------------- Generated Tests -----------------------
    // Code generated by py_byte_code5_evo3.py
    // from py_byte_code5.ex.py

    /**
     * Example 'classic_call': <pre>
     * n = len(*("hello",))
     * m = len(*("hello",), **{})
     * </pre>
     */
    //@formatter:off
    static final PyCode CLASSIC_CALL =
    /*
     *   1           0 LOAD_NAME                0 (len)
     *               2 LOAD_CONST               0 (('hello',))
     *               4 CALL_FUNCTION_EX         0
     *               6 STORE_NAME               1 (n)
     *
     *   2           8 LOAD_NAME                0 (len)
     *              10 LOAD_CONST               0 (('hello',))
     *              12 BUILD_MAP                0
     *              14 CALL_FUNCTION_EX         1
     *              16 STORE_NAME               2 (m)
     *              18 LOAD_CONST               1 (None)
     *              20 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 3, 64,
        Py.bytes(101, 0, 100, 0, -114, 0, 90, 1, 101, 0, 100, 0, 105,
            0, -114, 1, 90, 2, 100, 1, 83, 0),
        Py.tuple(
            Py.tuple(Py.str("hello")), Py.None),
        Py.tuple(Py.str("len"), Py.str("n"), Py.str("m")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("classic_call"), Py.str("<module>"), 1,
        Py.bytes(8, 1));
    //@formatter:on

    @Test
    void test_classic_call1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(CLASSIC_CALL, globals, globals);
        assertEquals(Py.val(5), globals.get("n"), "n == 5");
        assertEquals(Py.val(5), globals.get("m"), "m == 5");
        //@formatter:on
    }

    /**
     * Example 'builtin_call': <pre>
     * n = len(x)
     * </pre>
     */
    //@formatter:off
    static final PyCode BUILTIN_CALL =
    /*
     *   1           0 LOAD_NAME                0 (len)
     *               2 LOAD_NAME                1 (x)
     *               4 CALL_FUNCTION            1
     *               6 STORE_NAME               2 (n)
     *               8 LOAD_CONST               0 (None)
     *              10 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 2, 64,
        Py.bytes(101, 0, 101, 1, -125, 1, 90, 2, 100, 0, 83, 0),
        Py.tuple(Py.None),
        Py.tuple(Py.str("len"), Py.str("x"), Py.str("n")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("builtin_call"), Py.str("<module>"), 1,
        Py.bytes());
    //@formatter:on

    // @Test
    void test_builtin_call1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        globals.put("x", Py.str("hello"));
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(BUILTIN_CALL, globals, globals);
        assertEquals(Py.val(5), globals.get("n"), "n == 5");
        //@formatter:on
    }

    // @Test
    void test_builtin_call2() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        globals.put("x",
            Py.list(Py.val(1), Py.val(2), Py.val(3)));
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(BUILTIN_CALL, globals, globals);
        assertEquals(Py.val(3), globals.get("n"), "n == 3");
        //@formatter:on
    }

    // @Test
    void test_builtin_call3() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        globals.put("x",
            Py.tuple(Py.str("horse"), Py.val(42), Py.None));
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(BUILTIN_CALL, globals, globals);
        assertEquals(Py.val(3), globals.get("n"), "n == 3");
        //@formatter:on
    }

    /**
     * Example 'def_func': <pre>
     * def f():
     *     return x * 3
     * y = f()
     * </pre>
     */
    //@formatter:off
    static final PyCode DEF_FUNC =
    /*
     *   1           0 LOAD_CONST               0 (<code object f at 0x000001CED3F94030, file "def_func", line 1>)
     *               2 LOAD_CONST               1 ('f')
     *               4 MAKE_FUNCTION            0
     *               6 STORE_NAME               0 (f)
     *
     *   3           8 LOAD_NAME                0 (f)
     *              10 CALL_FUNCTION            0
     *              12 STORE_NAME               1 (y)
     *              14 LOAD_CONST               2 (None)
     *              16 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 2, 64,
        Py.bytes(100, 0, 100, 1, -124, 0, 90, 0, 101, 0, -125, 0, 90,
            1, 100, 2, 83, 0),
        Py.tuple(
            /*
             *   2           0 LOAD_GLOBAL              0 (x)
             *               2 LOAD_CONST               1 (3)
             *               4 BINARY_MULTIPLY
             *               6 RETURN_VALUE
             */
            new PyCode(0, 0, 0, 0, 2, 67,
                Py.bytes(116, 0, 100, 1, 20, 0, 83, 0),
                Py.tuple(Py.None, Py.val(3)),
                Py.tuple(Py.str("x")),
                Py.tuple(),
                Py.tuple(),
                Py.tuple(), Py.str("def_func"), Py.str("f"), 1,
                Py.bytes(0, 1)), Py.str("f"), Py.None),
        Py.tuple(Py.str("f"), Py.str("y")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("def_func"), Py.str("<module>"), 1,
        Py.bytes(8, 2));
    //@formatter:on

    // @Test
    void test_def_func1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        globals.put("x", Py.val(14));
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(DEF_FUNC, globals, globals);
        assertEquals(Py.val(42), globals.get("y"), "y == 42");
        //@formatter:on
    }

    // @Test
    void test_def_func2() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        globals.put("x", Py.str("ha"));
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(DEF_FUNC, globals, globals);
        assertEquals(Py.str("hahaha"), globals.get("y"),
            "y == 'hahaha'");
        //@formatter:on
    }

    /**
     * Example 'def_func_args': <pre>
     * def f(x, y):
     *     return x * y
     * y = f(u, v)
     * </pre>
     */
    //@formatter:off
    static final PyCode DEF_FUNC_ARGS =
    /*
     *   1           0 LOAD_CONST               0 (<code object f at 0x000001CED3F84A80, file "def_func_args", line 1>)
     *               2 LOAD_CONST               1 ('f')
     *               4 MAKE_FUNCTION            0
     *               6 STORE_NAME               0 (f)
     *
     *   3           8 LOAD_NAME                0 (f)
     *              10 LOAD_NAME                1 (u)
     *              12 LOAD_NAME                2 (v)
     *              14 CALL_FUNCTION            2
     *              16 STORE_NAME               3 (y)
     *              18 LOAD_CONST               2 (None)
     *              20 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 3, 64,
        Py.bytes(100, 0, 100, 1, -124, 0, 90, 0, 101, 0, 101, 1, 101,
            2, -125, 2, 90, 3, 100, 2, 83, 0),
        Py.tuple(
            /*
             *   2           0 LOAD_FAST                0 (x)
             *               2 LOAD_FAST                1 (y)
             *               4 BINARY_MULTIPLY
             *               6 RETURN_VALUE
             */
            new PyCode(2, 0, 0, 2, 2, 67,
                Py.bytes(124, 0, 124, 1, 20, 0, 83, 0),
                Py.tuple(Py.None),
                Py.tuple(),
                Py.tuple(Py.str("x"), Py.str("y")),
                Py.tuple(),
                Py.tuple(), Py.str("def_func_args"), Py.str("f"), 1,
                Py.bytes(0, 1)), Py.str("f"), Py.None),
        Py.tuple(Py.str("f"), Py.str("u"), Py.str("v"), Py.str("y")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("def_func_args"), Py.str("<module>"), 1,
        Py.bytes(8, 2));
    //@formatter:on

    // @Test
    void test_def_func_args1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        globals.put("u", Py.val(6));
        globals.put("v", Py.val(7));
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(DEF_FUNC_ARGS, globals, globals);
        assertEquals(Py.val(42), globals.get("y"), "y == 42");
        //@formatter:on
    }

    /**
     * Example 'def_func_kw': <pre>
     * def f(x, y, a=5, b=6):
     *     return x * y + a * b
     * y = f(3, 10, b=u, a=v)
     * z = f(9, 2, a=v)
     * </pre>
     */
    //@formatter:off
    static final PyCode DEF_FUNC_KW =
    /*
     *   1           0 LOAD_CONST              11 ((5, 6))
     *               2 LOAD_CONST               2 (<code object f at 0x000001CED3F8A450, file "def_func_kw", line 1>)
     *               4 LOAD_CONST               3 ('f')
     *               6 MAKE_FUNCTION            1 (defaults)
     *               8 STORE_NAME               0 (f)
     *
     *   3          10 LOAD_NAME                0 (f)
     *              12 LOAD_CONST               4 (3)
     *              14 LOAD_CONST               5 (10)
     *              16 LOAD_NAME                1 (u)
     *              18 LOAD_NAME                2 (v)
     *              20 LOAD_CONST               6 (('b', 'a'))
     *              22 CALL_FUNCTION_KW         4
     *              24 STORE_NAME               3 (y)
     *
     *   4          26 LOAD_NAME                0 (f)
     *              28 LOAD_CONST               7 (9)
     *              30 LOAD_CONST               8 (2)
     *              32 LOAD_NAME                2 (v)
     *              34 LOAD_CONST               9 (('a',))
     *              36 CALL_FUNCTION_KW         3
     *              38 STORE_NAME               4 (z)
     *              40 LOAD_CONST              10 (None)
     *              42 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 6, 64,
        Py.bytes(100, 11, 100, 2, 100, 3, -124, 1, 90, 0, 101, 0,
            100, 4, 100, 5, 101, 1, 101, 2, 100, 6, -115, 4, 90, 3,
            101, 0, 100, 7, 100, 8, 101, 2, 100, 9, -115, 3, 90, 4,
            100, 10, 83, 0),
        Py.tuple(Py.val(5), Py.val(6),
            /*
             *   2           0 LOAD_FAST                0 (x)
             *               2 LOAD_FAST                1 (y)
             *               4 BINARY_MULTIPLY
             *               6 LOAD_FAST                2 (a)
             *               8 LOAD_FAST                3 (b)
             *              10 BINARY_MULTIPLY
             *              12 BINARY_ADD
             *              14 RETURN_VALUE
             */
            new PyCode(4, 0, 0, 4, 3, 67,
                Py.bytes(124, 0, 124, 1, 20, 0, 124, 2, 124, 3, 20,
                    0, 23, 0, 83, 0),
                Py.tuple(Py.None),
                Py.tuple(),
                Py.tuple(Py.str("x"), Py.str("y"), Py.str("a"),
                    Py.str("b")),
                Py.tuple(),
                Py.tuple(), Py.str("def_func_kw"), Py.str("f"), 1,
                Py.bytes(0, 1)), Py.str("f"), Py.val(3), Py.val(10),
            Py.tuple(Py.str("b"), Py.str("a")), Py.val(9), Py.val(2),
            Py.tuple(Py.str("a")), Py.None,
            Py.tuple(Py.val(5), Py.val(6))),
        Py.tuple(Py.str("f"), Py.str("u"), Py.str("v"), Py.str("y"),
            Py.str("z")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("def_func_kw"), Py.str("<module>"), 1,
        Py.bytes(10, 2, 16, 1));
    //@formatter:on

    // @Test
    void test_def_func_kw1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        globals.put("u", Py.val(3));
        globals.put("v", Py.val(4));
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(DEF_FUNC_KW, globals, globals);
        assertEquals(Py.val(42), globals.get("y"), "y == 42");
        assertEquals(Py.val(42), globals.get("z"), "z == 42");
        //@formatter:on
    }

    /**
     * Example 'def_func_tuple': <pre>
     * def f(x, y, *args):
     *     return x * y + args[0] * args[1]
     * y = f(u+1, v-1, *args)
     * </pre>
     */
    //@formatter:off
    static final PyCode DEF_FUNC_TUPLE =
    /*
     *   1           0 LOAD_CONST               0 (<code object f at 0x000001CED3F8ABE0, file "def_func_tuple", line 1>)
     *               2 LOAD_CONST               1 ('f')
     *               4 MAKE_FUNCTION            0
     *               6 STORE_NAME               0 (f)
     *
     *   3           8 LOAD_NAME                0 (f)
     *              10 LOAD_NAME                1 (u)
     *              12 LOAD_CONST               2 (1)
     *              14 BINARY_ADD
     *              16 LOAD_NAME                2 (v)
     *              18 LOAD_CONST               2 (1)
     *              20 BINARY_SUBTRACT
     *              22 BUILD_TUPLE              2
     *              24 LOAD_NAME                3 (args)
     *              26 BUILD_TUPLE_UNPACK_WITH_CALL     2
     *              28 CALL_FUNCTION_EX         0
     *              30 STORE_NAME               4 (y)
     *              32 LOAD_CONST               3 (None)
     *              34 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 4, 64,
        Py.bytes(100, 0, 100, 1, -124, 0, 90, 0, 101, 0, 101, 1, 100,
            2, 23, 0, 101, 2, 100, 2, 24, 0, 102, 2, 101, 3, -98, 2,
            -114, 0, 90, 4, 100, 3, 83, 0),
        Py.tuple(
            /*
             *   2           0 LOAD_FAST                0 (x)
             *               2 LOAD_FAST                1 (y)
             *               4 BINARY_MULTIPLY
             *               6 LOAD_FAST                2 (args)
             *               8 LOAD_CONST               1 (0)
             *              10 BINARY_SUBSCR
             *              12 LOAD_FAST                2 (args)
             *              14 LOAD_CONST               2 (1)
             *              16 BINARY_SUBSCR
             *              18 BINARY_MULTIPLY
             *              20 BINARY_ADD
             *              22 RETURN_VALUE
             */
            new PyCode(2, 0, 0, 3, 4, 71,
                Py.bytes(124, 0, 124, 1, 20, 0, 124, 2, 100, 1, 25,
                    0, 124, 2, 100, 2, 25, 0, 20, 0, 23, 0, 83, 0),
                Py.tuple(Py.None, Py.val(0), Py.val(1)),
                Py.tuple(),
                Py.tuple(Py.str("x"), Py.str("y"), Py.str("args")),
                Py.tuple(),
                Py.tuple(), Py.str("def_func_tuple"), Py.str("f"), 1,
                Py.bytes(0, 1)), Py.str("f"), Py.val(1), Py.None),
        Py.tuple(Py.str("f"), Py.str("u"), Py.str("v"),
            Py.str("args"), Py.str("y")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("def_func_tuple"), Py.str("<module>"), 1,
        Py.bytes(8, 2));
    //@formatter:on

    // @Test
    void test_def_func_tuple1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        globals.put("u", Py.val(3));
        globals.put("v", Py.val(4));
        globals.put("args",
            Py.tuple(Py.val(5), Py.val(6)));
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(DEF_FUNC_TUPLE, globals, globals);
        assertEquals(Py.val(42), globals.get("y"), "y == 42");
        //@formatter:on
    }

    /**
     * Example 'def_func_dict': <pre>
     * def f(x, y, a=500, b=600):
     *     return x * y + a * b
     * kw = {'a': u, 'b': v-6}
     * y = f(u, v, **kw)
     * </pre>
     */
    //@formatter:off
    static final PyCode DEF_FUNC_DICT =
    /*
     *   1           0 LOAD_CONST               7 ((500, 600))
     *               2 LOAD_CONST               2 (<code object f at 0x000001CED3F8D2F0, file "def_func_dict", line 1>)
     *               4 LOAD_CONST               3 ('f')
     *               6 MAKE_FUNCTION            1 (defaults)
     *               8 STORE_NAME               0 (f)
     *
     *   3          10 LOAD_NAME                1 (u)
     *              12 LOAD_NAME                2 (v)
     *              14 LOAD_CONST               4 (6)
     *              16 BINARY_SUBTRACT
     *              18 LOAD_CONST               5 (('a', 'b'))
     *              20 BUILD_CONST_KEY_MAP      2
     *              22 STORE_NAME               3 (kw)
     *
     *   4          24 LOAD_NAME                0 (f)
     *              26 LOAD_NAME                1 (u)
     *              28 LOAD_NAME                2 (v)
     *              30 BUILD_TUPLE              2
     *              32 LOAD_NAME                3 (kw)
     *              34 CALL_FUNCTION_EX         1
     *              36 STORE_NAME               4 (y)
     *              38 LOAD_CONST               6 (None)
     *              40 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 3, 64,
        Py.bytes(100, 7, 100, 2, 100, 3, -124, 1, 90, 0, 101, 1, 101,
            2, 100, 4, 24, 0, 100, 5, -100, 2, 90, 3, 101, 0, 101, 1,
            101, 2, 102, 2, 101, 3, -114, 1, 90, 4, 100, 6, 83, 0),
        Py.tuple(Py.val(500), Py.val(600),
            /*
             *   2           0 LOAD_FAST                0 (x)
             *               2 LOAD_FAST                1 (y)
             *               4 BINARY_MULTIPLY
             *               6 LOAD_FAST                2 (a)
             *               8 LOAD_FAST                3 (b)
             *              10 BINARY_MULTIPLY
             *              12 BINARY_ADD
             *              14 RETURN_VALUE
             */
            new PyCode(4, 0, 0, 4, 3, 67,
                Py.bytes(124, 0, 124, 1, 20, 0, 124, 2, 124, 3, 20,
                    0, 23, 0, 83, 0),
                Py.tuple(Py.None),
                Py.tuple(),
                Py.tuple(Py.str("x"), Py.str("y"), Py.str("a"),
                    Py.str("b")),
                Py.tuple(),
                Py.tuple(), Py.str("def_func_dict"), Py.str("f"), 1,
                Py.bytes(0, 1)), Py.str("f"), Py.val(6),
            Py.tuple(Py.str("a"), Py.str("b")), Py.None,
            Py.tuple(Py.val(500), Py.val(600))),
        Py.tuple(Py.str("f"), Py.str("u"), Py.str("v"), Py.str("kw"),
            Py.str("y")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("def_func_dict"), Py.str("<module>"), 1,
        Py.bytes(10, 2, 14, 1));
    //@formatter:on

    // @Test
    void test_def_func_dict1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        globals.put("u", Py.val(3));
        globals.put("v", Py.val(10));
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(DEF_FUNC_DICT, globals, globals);
        assertEquals(Py.val(42), globals.get("y"), "y == 42");
        //@formatter:on
    }

    /**
     * Example 'def_func_tuple_dict': <pre>
     * def f(x, y, *args, a=400, b=600, **kwargs):
     *     return (x + y - a) * (args[0] + b + kwargs['c'])
     * kw = {'a': u-1, 'c': 1}
     * x = f(s, *ar, b=v, **kw)
     * y = f(s, t, *ar, b=v, **kw)
     * z = f(*ar, **kw)
     * </pre>
     */
    //@formatter:off
    static final PyCode DEF_FUNC_TUPLE_DICT =
    /*
     *   1           0 LOAD_CONST               0 (400)
     *               2 LOAD_CONST               1 (600)
     *               4 LOAD_CONST               2 (('a', 'b'))
     *               6 BUILD_CONST_KEY_MAP      2
     *               8 LOAD_CONST               3 (<code object f at 0x000001CED3F8D9D0, file "def_func_tuple_dict", line 1>)
     *              10 LOAD_CONST               4 ('f')
     *              12 MAKE_FUNCTION            2 (kwdefaults)
     *              14 STORE_NAME               0 (f)
     *
     *   3          16 LOAD_NAME                1 (u)
     *              18 LOAD_CONST               5 (1)
     *              20 BINARY_SUBTRACT
     *              22 LOAD_CONST               5 (1)
     *              24 LOAD_CONST               6 (('a', 'c'))
     *              26 BUILD_CONST_KEY_MAP      2
     *              28 STORE_NAME               2 (kw)
     *
     *   4          30 LOAD_NAME                0 (f)
     *              32 LOAD_NAME                3 (s)
     *              34 BUILD_TUPLE              1
     *              36 LOAD_NAME                4 (ar)
     *              38 BUILD_TUPLE_UNPACK_WITH_CALL     2
     *              40 LOAD_CONST               7 ('b')
     *              42 LOAD_NAME                5 (v)
     *              44 BUILD_MAP                1
     *              46 LOAD_NAME                2 (kw)
     *              48 BUILD_MAP_UNPACK_WITH_CALL     2
     *              50 CALL_FUNCTION_EX         1
     *              52 STORE_NAME               6 (x)
     *
     *   5          54 LOAD_NAME                0 (f)
     *              56 LOAD_NAME                3 (s)
     *              58 LOAD_NAME                7 (t)
     *              60 BUILD_TUPLE              2
     *              62 LOAD_NAME                4 (ar)
     *              64 BUILD_TUPLE_UNPACK_WITH_CALL     2
     *              66 LOAD_CONST               7 ('b')
     *              68 LOAD_NAME                5 (v)
     *              70 BUILD_MAP                1
     *              72 LOAD_NAME                2 (kw)
     *              74 BUILD_MAP_UNPACK_WITH_CALL     2
     *              76 CALL_FUNCTION_EX         1
     *              78 STORE_NAME               8 (y)
     *
     *   6          80 LOAD_NAME                0 (f)
     *              82 LOAD_NAME                4 (ar)
     *              84 LOAD_NAME                2 (kw)
     *              86 CALL_FUNCTION_EX         1
     *              88 STORE_NAME               9 (z)
     *              90 LOAD_CONST               8 (None)
     *              92 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 4, 64,
        Py.bytes(100, 0, 100, 1, 100, 2, -100, 2, 100, 3, 100, 4,
            -124, 2, 90, 0, 101, 1, 100, 5, 24, 0, 100, 5, 100, 6,
            -100, 2, 90, 2, 101, 0, 101, 3, 102, 1, 101, 4, -98, 2,
            100, 7, 101, 5, 105, 1, 101, 2, -105, 2, -114, 1, 90, 6,
            101, 0, 101, 3, 101, 7, 102, 2, 101, 4, -98, 2, 100, 7,
            101, 5, 105, 1, 101, 2, -105, 2, -114, 1, 90, 8, 101, 0,
            101, 4, 101, 2, -114, 1, 90, 9, 100, 8, 83, 0),
        Py.tuple(Py.val(400), Py.val(600),
            Py.tuple(Py.str("a"), Py.str("b")),
            /*
             *   2           0 LOAD_FAST                0 (x)
             *               2 LOAD_FAST                1 (y)
             *               4 BINARY_ADD
             *               6 LOAD_FAST                2 (a)
             *               8 BINARY_SUBTRACT
             *              10 LOAD_FAST                4 (args)
             *              12 LOAD_CONST               1 (0)
             *              14 BINARY_SUBSCR
             *              16 LOAD_FAST                3 (b)
             *              18 BINARY_ADD
             *              20 LOAD_FAST                5 (kwargs)
             *              22 LOAD_CONST               2 ('c')
             *              24 BINARY_SUBSCR
             *              26 BINARY_ADD
             *              28 BINARY_MULTIPLY
             *              30 RETURN_VALUE
             */
            new PyCode(2, 0, 2, 6, 4, 79,
                Py.bytes(124, 0, 124, 1, 23, 0, 124, 2, 24, 0, 124,
                    4, 100, 1, 25, 0, 124, 3, 23, 0, 124, 5, 100, 2,
                    25, 0, 23, 0, 20, 0, 83, 0),
                Py.tuple(Py.None, Py.val(0), Py.str("c")),
                Py.tuple(),
                Py.tuple(Py.str("x"), Py.str("y"), Py.str("a"),
                    Py.str("b"), Py.str("args"), Py.str("kwargs")),
                Py.tuple(),
                Py.tuple(), Py.str("def_func_tuple_dict"),
                Py.str("f"), 1,
                Py.bytes(0, 1)), Py.str("f"), Py.val(1),
            Py.tuple(Py.str("a"), Py.str("c")), Py.str("b"),
            Py.None),
        Py.tuple(Py.str("f"), Py.str("u"), Py.str("kw"), Py.str("s"),
            Py.str("ar"), Py.str("v"), Py.str("x"), Py.str("t"),
            Py.str("y"), Py.str("z")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("def_func_tuple_dict"),
        Py.str("<module>"), 1,
        Py.bytes(16, 2, 14, 1, 24, 1, 26, 1));
    //@formatter:on

    // @Test
    void test_def_func_tuple_dict1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        globals.put("s", Py.val(7));
        globals.put("t", Py.val(6));
        globals.put("u", Py.val(5));
        globals.put("v", Py.val(4));
        globals.put("ar",
            Py.tuple(Py.val(3), Py.val(2), Py.val(1)));
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(DEF_FUNC_TUPLE_DICT, globals, globals);
        assertEquals(Py.val(42), globals.get("x"), "x == 42");
        assertEquals(Py.val(72), globals.get("y"), "y == 72");
        assertEquals(Py.val(602), globals.get("z"), "z == 602");
        //@formatter:on
    }

    /**
     * Example 'faqprog': <pre>
     * # The FAQ on global and local is insufficient
     * a = 6
     * b = 7
     * def p():
     *     def q():
     *         global c
     *         c = a * b
     *     q()
     * p()
     * </pre>
     */
    //@formatter:off
    static final PyCode FAQPROG =
    /*
     *   2           0 LOAD_CONST               0 (6)
     *               2 STORE_NAME               0 (a)
     *
     *   3           4 LOAD_CONST               1 (7)
     *               6 STORE_NAME               1 (b)
     *
     *   4           8 LOAD_CONST               2 (<code object p at 0x000001CED3F97660, file "faqprog", line 4>)
     *              10 LOAD_CONST               3 ('p')
     *              12 MAKE_FUNCTION            0
     *              14 STORE_NAME               2 (p)
     *
     *   9          16 LOAD_NAME                2 (p)
     *              18 CALL_FUNCTION            0
     *              20 POP_TOP
     *              22 LOAD_CONST               4 (None)
     *              24 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 2, 64,
        Py.bytes(100, 0, 90, 0, 100, 1, 90, 1, 100, 2, 100, 3, -124,
            0, 90, 2, 101, 2, -125, 0, 1, 0, 100, 4, 83, 0),
        Py.tuple(Py.val(6), Py.val(7),
            /*
             *   5           0 LOAD_CONST               1 (<code object q at 0x000001CED3F975B0, file "faqprog", line 5>)
             *               2 LOAD_CONST               2 ('p.<locals>.q')
             *               4 MAKE_FUNCTION            0
             *               6 STORE_FAST               0 (q)
             *
             *   8           8 LOAD_FAST                0 (q)
             *              10 CALL_FUNCTION            0
             *              12 POP_TOP
             *              14 LOAD_CONST               0 (None)
             *              16 RETURN_VALUE
             */
            new PyCode(0, 0, 0, 1, 2, 67,
                Py.bytes(100, 1, 100, 2, -124, 0, 125, 0, 124, 0,
                    -125, 0, 1, 0, 100, 0, 83, 0),
                Py.tuple(Py.None,
                    /*
                     *   7           0 LOAD_GLOBAL              0 (a)
                     *               2 LOAD_GLOBAL              1 (b)
                     *               4 BINARY_MULTIPLY
                     *               6 STORE_GLOBAL             2 (c)
                     *               8 LOAD_CONST               0 (None)
                     *              10 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 0, 2, 83,
                        Py.bytes(116, 0, 116, 1, 20, 0, 97, 2, 100,
                            0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(Py.str("a"), Py.str("b"),
                            Py.str("c")),
                        Py.tuple(),
                        Py.tuple(),
                        Py.tuple(), Py.str("faqprog"), Py.str("q"),
                        5,
                        Py.bytes(0, 2)), Py.str("p.<locals>.q")),
                Py.tuple(),
                Py.tuple(Py.str("q")),
                Py.tuple(),
                Py.tuple(), Py.str("faqprog"), Py.str("p"), 4,
                Py.bytes(0, 1, 8, 3)), Py.str("p"), Py.None),
        Py.tuple(Py.str("a"), Py.str("b"), Py.str("p")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("faqprog"), Py.str("<module>"), 2,
        Py.bytes(4, 1, 4, 1, 8, 5));
    //@formatter:on

    // @Test
    void test_faqprog1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(FAQPROG, globals, globals);
        assertEquals(Py.val(42), globals.get("c"), "c == 42");
        //@formatter:on
    }

    /**
     * Example 'globprog_a': <pre>
     * # Test allocation of "names" (globals)
     * # global d is *not* ref'd at module level
     * b = 1
     * a = 6
     *
     * def p():
     *     global result
     *     def q():
     *         global d    # not ref'd at module level
     *         d = a + b
     *     q()
     *     result = a * d
     *
     * p()
     * </pre>
     */
    //@formatter:off
    static final PyCode GLOBPROG_A =
    /*
     *   3           0 LOAD_CONST               0 (1)
     *               2 STORE_NAME               0 (b)
     *
     *   4           4 LOAD_CONST               1 (6)
     *               6 STORE_NAME               1 (a)
     *
     *   6           8 LOAD_CONST               2 (<code object p at 0x000001CED3F97500, file "globprog_a", line 6>)
     *              10 LOAD_CONST               3 ('p')
     *              12 MAKE_FUNCTION            0
     *              14 STORE_NAME               2 (p)
     *
     *  14          16 LOAD_NAME                2 (p)
     *              18 CALL_FUNCTION            0
     *              20 POP_TOP
     *              22 LOAD_CONST               4 (None)
     *              24 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 2, 64,
        Py.bytes(100, 0, 90, 0, 100, 1, 90, 1, 100, 2, 100, 3, -124,
            0, 90, 2, 101, 2, -125, 0, 1, 0, 100, 4, 83, 0),
        Py.tuple(Py.val(1), Py.val(6),
            /*
             *   8           0 LOAD_CONST               1 (<code object q at 0x000001CED3F97710, file "globprog_a", line 8>)
             *               2 LOAD_CONST               2 ('p.<locals>.q')
             *               4 MAKE_FUNCTION            0
             *               6 STORE_FAST               0 (q)
             *
             *  11           8 LOAD_FAST                0 (q)
             *              10 CALL_FUNCTION            0
             *              12 POP_TOP
             *
             *  12          14 LOAD_GLOBAL              0 (a)
             *              16 LOAD_GLOBAL              1 (d)
             *              18 BINARY_MULTIPLY
             *              20 STORE_GLOBAL             2 (result)
             *              22 LOAD_CONST               0 (None)
             *              24 RETURN_VALUE
             */
            new PyCode(0, 0, 0, 1, 2, 67,
                Py.bytes(100, 1, 100, 2, -124, 0, 125, 0, 124, 0,
                    -125, 0, 1, 0, 116, 0, 116, 1, 20, 0, 97, 2, 100,
                    0, 83, 0),
                Py.tuple(Py.None,
                    /*
                     *  10           0 LOAD_GLOBAL              0 (a)
                     *               2 LOAD_GLOBAL              1 (b)
                     *               4 BINARY_ADD
                     *               6 STORE_GLOBAL             2 (d)
                     *               8 LOAD_CONST               0 (None)
                     *              10 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 0, 2, 83,
                        Py.bytes(116, 0, 116, 1, 23, 0, 97, 2, 100,
                            0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(Py.str("a"), Py.str("b"),
                            Py.str("d")),
                        Py.tuple(),
                        Py.tuple(),
                        Py.tuple(), Py.str("globprog_a"),
                        Py.str("q"), 8,
                        Py.bytes(0, 2)), Py.str("p.<locals>.q")),
                Py.tuple(Py.str("a"), Py.str("d"), Py.str("result")),
                Py.tuple(Py.str("q")),
                Py.tuple(),
                Py.tuple(), Py.str("globprog_a"), Py.str("p"), 6,
                Py.bytes(0, 2, 8, 3, 6, 1)), Py.str("p"), Py.None),
        Py.tuple(Py.str("b"), Py.str("a"), Py.str("p")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("globprog_a"), Py.str("<module>"), 3,
        Py.bytes(4, 1, 4, 2, 8, 8));
    //@formatter:on

    // @Test
    void test_globprog_a1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(GLOBPROG_A, globals, globals);
        assertEquals(Py.val(7), globals.get("d"), "d == 7");
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

    /**
     * Example 'globprog_b': <pre>
     * # Test allocation of "names" (globals)
     * # global d is *assigned* at module level
     * b = 1
     * a = 6
     * d = 41
     *
     * def p():
     *     global result
     *     def q():
     *         global d
     *         d = a + b
     *     q()
     *     result = a * d
     *
     * p()
     * </pre>
     */
    //@formatter:off
    static final PyCode GLOBPROG_B =
    /*
     *   3           0 LOAD_CONST               0 (1)
     *               2 STORE_NAME               0 (b)
     *
     *   4           4 LOAD_CONST               1 (6)
     *               6 STORE_NAME               1 (a)
     *
     *   5           8 LOAD_CONST               2 (41)
     *              10 STORE_GLOBAL             2 (d)
     *
     *   7          12 LOAD_CONST               3 (<code object p at 0x000001CED3F97870, file "globprog_b", line 7>)
     *              14 LOAD_CONST               4 ('p')
     *              16 MAKE_FUNCTION            0
     *              18 STORE_NAME               3 (p)
     *
     *  15          20 LOAD_NAME                3 (p)
     *              22 CALL_FUNCTION            0
     *              24 POP_TOP
     *              26 LOAD_CONST               5 (None)
     *              28 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 2, 64,
        Py.bytes(100, 0, 90, 0, 100, 1, 90, 1, 100, 2, 97, 2, 100, 3,
            100, 4, -124, 0, 90, 3, 101, 3, -125, 0, 1, 0, 100, 5,
            83, 0),
        Py.tuple(Py.val(1), Py.val(6), Py.val(41),
            /*
             *   9           0 LOAD_CONST               1 (<code object q at 0x000001CED3F977C0, file "globprog_b", line 9>)
             *               2 LOAD_CONST               2 ('p.<locals>.q')
             *               4 MAKE_FUNCTION            0
             *               6 STORE_FAST               0 (q)
             *
             *  12           8 LOAD_FAST                0 (q)
             *              10 CALL_FUNCTION            0
             *              12 POP_TOP
             *
             *  13          14 LOAD_GLOBAL              0 (a)
             *              16 LOAD_GLOBAL              1 (d)
             *              18 BINARY_MULTIPLY
             *              20 STORE_GLOBAL             2 (result)
             *              22 LOAD_CONST               0 (None)
             *              24 RETURN_VALUE
             */
            new PyCode(0, 0, 0, 1, 2, 67,
                Py.bytes(100, 1, 100, 2, -124, 0, 125, 0, 124, 0,
                    -125, 0, 1, 0, 116, 0, 116, 1, 20, 0, 97, 2, 100,
                    0, 83, 0),
                Py.tuple(Py.None,
                    /*
                     *  11           0 LOAD_GLOBAL              0 (a)
                     *               2 LOAD_GLOBAL              1 (b)
                     *               4 BINARY_ADD
                     *               6 STORE_GLOBAL             2 (d)
                     *               8 LOAD_CONST               0 (None)
                     *              10 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 0, 2, 83,
                        Py.bytes(116, 0, 116, 1, 23, 0, 97, 2, 100,
                            0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(Py.str("a"), Py.str("b"),
                            Py.str("d")),
                        Py.tuple(),
                        Py.tuple(),
                        Py.tuple(), Py.str("globprog_b"),
                        Py.str("q"), 9,
                        Py.bytes(0, 2)), Py.str("p.<locals>.q")),
                Py.tuple(Py.str("a"), Py.str("d"), Py.str("result")),
                Py.tuple(Py.str("q")),
                Py.tuple(),
                Py.tuple(), Py.str("globprog_b"), Py.str("p"), 7,
                Py.bytes(0, 2, 8, 3, 6, 1)), Py.str("p"), Py.None),
        Py.tuple(Py.str("b"), Py.str("a"), Py.str("d"), Py.str("p")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("globprog_b"), Py.str("<module>"), 3,
        Py.bytes(4, 1, 4, 1, 4, 2, 8, 8));
    //@formatter:on

    // @Test
    void test_globprog_b1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(GLOBPROG_B, globals, globals);
        assertEquals(Py.val(7), globals.get("d"), "d == 7");
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

    /**
     * Example 'globprog_c': <pre>
     * # Test allocation of "names" (globals)
     * # global d *declared* but not used at module level
     * global a, b, d
     * b = 1
     * a = 6
     *
     * def p():
     *     global result
     *     def q():
     *         global d
     *         d = a + b
     *     q()
     *     result = a * d
     *
     * p()
     * </pre>
     */
    //@formatter:off
    static final PyCode GLOBPROG_C =
    /*
     *   4           0 LOAD_CONST               0 (1)
     *               2 STORE_GLOBAL             0 (b)
     *
     *   5           4 LOAD_CONST               1 (6)
     *               6 STORE_GLOBAL             1 (a)
     *
     *   7           8 LOAD_CONST               2 (<code object p at 0x000001CED3F979D0, file "globprog_c", line 7>)
     *              10 LOAD_CONST               3 ('p')
     *              12 MAKE_FUNCTION            0
     *              14 STORE_NAME               2 (p)
     *
     *  15          16 LOAD_NAME                2 (p)
     *              18 CALL_FUNCTION            0
     *              20 POP_TOP
     *              22 LOAD_CONST               4 (None)
     *              24 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 2, 64,
        Py.bytes(100, 0, 97, 0, 100, 1, 97, 1, 100, 2, 100, 3, -124,
            0, 90, 2, 101, 2, -125, 0, 1, 0, 100, 4, 83, 0),
        Py.tuple(Py.val(1), Py.val(6),
            /*
             *   9           0 LOAD_CONST               1 (<code object q at 0x000001CED3F97920, file "globprog_c", line 9>)
             *               2 LOAD_CONST               2 ('p.<locals>.q')
             *               4 MAKE_FUNCTION            0
             *               6 STORE_FAST               0 (q)
             *
             *  12           8 LOAD_FAST                0 (q)
             *              10 CALL_FUNCTION            0
             *              12 POP_TOP
             *
             *  13          14 LOAD_GLOBAL              0 (a)
             *              16 LOAD_GLOBAL              1 (d)
             *              18 BINARY_MULTIPLY
             *              20 STORE_GLOBAL             2 (result)
             *              22 LOAD_CONST               0 (None)
             *              24 RETURN_VALUE
             */
            new PyCode(0, 0, 0, 1, 2, 67,
                Py.bytes(100, 1, 100, 2, -124, 0, 125, 0, 124, 0,
                    -125, 0, 1, 0, 116, 0, 116, 1, 20, 0, 97, 2, 100,
                    0, 83, 0),
                Py.tuple(Py.None,
                    /*
                     *  11           0 LOAD_GLOBAL              0 (a)
                     *               2 LOAD_GLOBAL              1 (b)
                     *               4 BINARY_ADD
                     *               6 STORE_GLOBAL             2 (d)
                     *               8 LOAD_CONST               0 (None)
                     *              10 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 0, 2, 83,
                        Py.bytes(116, 0, 116, 1, 23, 0, 97, 2, 100,
                            0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(Py.str("a"), Py.str("b"),
                            Py.str("d")),
                        Py.tuple(),
                        Py.tuple(),
                        Py.tuple(), Py.str("globprog_c"),
                        Py.str("q"), 9,
                        Py.bytes(0, 2)), Py.str("p.<locals>.q")),
                Py.tuple(Py.str("a"), Py.str("d"), Py.str("result")),
                Py.tuple(Py.str("q")),
                Py.tuple(),
                Py.tuple(), Py.str("globprog_c"), Py.str("p"), 7,
                Py.bytes(0, 2, 8, 3, 6, 1)), Py.str("p"), Py.None),
        Py.tuple(Py.str("b"), Py.str("a"), Py.str("p")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("globprog_c"), Py.str("<module>"), 4,
        Py.bytes(4, 1, 4, 2, 8, 8));
    //@formatter:on

    // @Test
    void test_globprog_c1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(GLOBPROG_C, globals, globals);
        assertEquals(Py.val(7), globals.get("d"), "d == 7");
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

    /**
     * Example 'alloc_builtin': <pre>
     * # Test allocation of "names" (globals and a built-in)
     * a = -6
     * b = 7
     * result = min(0, b)
     *
     * def p():
     *     global result
     *     def q():
     *         global a
     *         a = abs(a)
     *     q()
     *     result = a * b
     *
     * p()
     * </pre>
     */
    //@formatter:off
    static final PyCode ALLOC_BUILTIN =
    /*
     *   2           0 LOAD_CONST               0 (-6)
     *               2 STORE_GLOBAL             0 (a)
     *
     *   3           4 LOAD_CONST               1 (7)
     *               6 STORE_NAME               1 (b)
     *
     *   4           8 LOAD_NAME                2 (min)
     *              10 LOAD_CONST               2 (0)
     *              12 LOAD_NAME                1 (b)
     *              14 CALL_FUNCTION            2
     *              16 STORE_GLOBAL             3 (result)
     *
     *   6          18 LOAD_CONST               3 (<code object p at 0x000001CED3F97B30, file "alloc_builtin", line 6>)
     *              20 LOAD_CONST               4 ('p')
     *              22 MAKE_FUNCTION            0
     *              24 STORE_NAME               4 (p)
     *
     *  14          26 LOAD_NAME                4 (p)
     *              28 CALL_FUNCTION            0
     *              30 POP_TOP
     *              32 LOAD_CONST               5 (None)
     *              34 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 3, 64,
        Py.bytes(100, 0, 97, 0, 100, 1, 90, 1, 101, 2, 100, 2, 101,
            1, -125, 2, 97, 3, 100, 3, 100, 4, -124, 0, 90, 4, 101,
            4, -125, 0, 1, 0, 100, 5, 83, 0),
        Py.tuple(Py.val(-6), Py.val(7), Py.val(0),
            /*
             *   8           0 LOAD_CONST               1 (<code object q at 0x000001CED3F97A80, file "alloc_builtin", line 8>)
             *               2 LOAD_CONST               2 ('p.<locals>.q')
             *               4 MAKE_FUNCTION            0
             *               6 STORE_FAST               0 (q)
             *
             *  11           8 LOAD_FAST                0 (q)
             *              10 CALL_FUNCTION            0
             *              12 POP_TOP
             *
             *  12          14 LOAD_GLOBAL              0 (a)
             *              16 LOAD_GLOBAL              1 (b)
             *              18 BINARY_MULTIPLY
             *              20 STORE_GLOBAL             2 (result)
             *              22 LOAD_CONST               0 (None)
             *              24 RETURN_VALUE
             */
            new PyCode(0, 0, 0, 1, 2, 67,
                Py.bytes(100, 1, 100, 2, -124, 0, 125, 0, 124, 0,
                    -125, 0, 1, 0, 116, 0, 116, 1, 20, 0, 97, 2, 100,
                    0, 83, 0),
                Py.tuple(Py.None,
                    /*
                     *  10           0 LOAD_GLOBAL              0 (abs)
                     *               2 LOAD_GLOBAL              1 (a)
                     *               4 CALL_FUNCTION            1
                     *               6 STORE_GLOBAL             1 (a)
                     *               8 LOAD_CONST               0 (None)
                     *              10 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 0, 2, 83,
                        Py.bytes(116, 0, 116, 1, -125, 1, 97, 1, 100,
                            0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(Py.str("abs"), Py.str("a")),
                        Py.tuple(),
                        Py.tuple(),
                        Py.tuple(), Py.str("alloc_builtin"),
                        Py.str("q"), 8,
                        Py.bytes(0, 2)), Py.str("p.<locals>.q")),
                Py.tuple(Py.str("a"), Py.str("b"), Py.str("result")),
                Py.tuple(Py.str("q")),
                Py.tuple(),
                Py.tuple(), Py.str("alloc_builtin"), Py.str("p"), 6,
                Py.bytes(0, 2, 8, 3, 6, 1)), Py.str("p"), Py.None),
        Py.tuple(Py.str("a"), Py.str("b"), Py.str("min"),
            Py.str("result"), Py.str("p")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("alloc_builtin"), Py.str("<module>"), 2,
        Py.bytes(4, 1, 4, 1, 10, 2, 8, 8));
    //@formatter:on

    // @Test
    void test_alloc_builtin1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(ALLOC_BUILTIN, globals, globals);
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

    /**
     * Example 'argprog': <pre>
     * # Test allocation of argument lists and locals
     * def p(eins, zwei):
     *     def sum(un, deux, trois):
     *         return un + deux + trois
     *     def diff(tolv, fem):
     *         return tolv - fem
     *     def prod(sex, sju):
     *         return sex * sju
     *     drei = 3
     *     six = sum(eins, zwei, drei)
     *     seven = diff(2 * six, drei + zwei)
     *     return prod(six, seven)
     *
     * result = p(1, 2)
     * </pre>
     */
    //@formatter:off
    static final PyCode ARGPROG =
    /*
     *   2           0 LOAD_CONST               0 (<code object p at 0x000001CED3F97DF0, file "argprog", line 2>)
     *               2 LOAD_CONST               1 ('p')
     *               4 MAKE_FUNCTION            0
     *               6 STORE_NAME               0 (p)
     *
     *  14           8 LOAD_NAME                0 (p)
     *              10 LOAD_CONST               2 (1)
     *              12 LOAD_CONST               3 (2)
     *              14 CALL_FUNCTION            2
     *              16 STORE_NAME               1 (result)
     *              18 LOAD_CONST               4 (None)
     *              20 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 3, 64,
        Py.bytes(100, 0, 100, 1, -124, 0, 90, 0, 101, 0, 100, 2, 100,
            3, -125, 2, 90, 1, 100, 4, 83, 0),
        Py.tuple(
            /*
             *   3           0 LOAD_CONST               1 (<code object sum at 0x000001CED3F97BE0, file "argprog", line 3>)
             *               2 LOAD_CONST               2 ('p.<locals>.sum')
             *               4 MAKE_FUNCTION            0
             *               6 STORE_FAST               2 (sum)
             *
             *   5           8 LOAD_CONST               3 (<code object diff at 0x000001CED3F97C90, file "argprog", line 5>)
             *              10 LOAD_CONST               4 ('p.<locals>.diff')
             *              12 MAKE_FUNCTION            0
             *              14 STORE_FAST               3 (diff)
             *
             *   7          16 LOAD_CONST               5 (<code object prod at 0x000001CED3F97D40, file "argprog", line 7>)
             *              18 LOAD_CONST               6 ('p.<locals>.prod')
             *              20 MAKE_FUNCTION            0
             *              22 STORE_FAST               4 (prod)
             *
             *   9          24 LOAD_CONST               7 (3)
             *              26 STORE_FAST               5 (drei)
             *
             *  10          28 LOAD_FAST                2 (sum)
             *              30 LOAD_FAST                0 (eins)
             *              32 LOAD_FAST                1 (zwei)
             *              34 LOAD_FAST                5 (drei)
             *              36 CALL_FUNCTION            3
             *              38 STORE_FAST               6 (six)
             *
             *  11          40 LOAD_FAST                3 (diff)
             *              42 LOAD_CONST               8 (2)
             *              44 LOAD_FAST                6 (six)
             *              46 BINARY_MULTIPLY
             *              48 LOAD_FAST                5 (drei)
             *              50 LOAD_FAST                1 (zwei)
             *              52 BINARY_ADD
             *              54 CALL_FUNCTION            2
             *              56 STORE_FAST               7 (seven)
             *
             *  12          58 LOAD_FAST                4 (prod)
             *              60 LOAD_FAST                6 (six)
             *              62 LOAD_FAST                7 (seven)
             *              64 CALL_FUNCTION            2
             *              66 RETURN_VALUE
             */
            new PyCode(2, 0, 0, 8, 4, 67,
                Py.bytes(100, 1, 100, 2, -124, 0, 125, 2, 100, 3,
                    100, 4, -124, 0, 125, 3, 100, 5, 100, 6, -124, 0,
                    125, 4, 100, 7, 125, 5, 124, 2, 124, 0, 124, 1,
                    124, 5, -125, 3, 125, 6, 124, 3, 100, 8, 124, 6,
                    20, 0, 124, 5, 124, 1, 23, 0, -125, 2, 125, 7,
                    124, 4, 124, 6, 124, 7, -125, 2, 83, 0),
                Py.tuple(Py.None,
                    /*
                     *   4           0 LOAD_FAST                0 (un)
                     *               2 LOAD_FAST                1 (deux)
                     *               4 BINARY_ADD
                     *               6 LOAD_FAST                2 (trois)
                     *               8 BINARY_ADD
                     *              10 RETURN_VALUE
                     */
                    new PyCode(3, 0, 0, 3, 2, 83,
                        Py.bytes(124, 0, 124, 1, 23, 0, 124, 2, 23,
                            0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(),
                        Py.tuple(Py.str("un"), Py.str("deux"),
                            Py.str("trois")),
                        Py.tuple(),
                        Py.tuple(), Py.str("argprog"), Py.str("sum"),
                        3,
                        Py.bytes(0, 1)), Py.str("p.<locals>.sum"),
                    /*
                     *   6           0 LOAD_FAST                0 (tolv)
                     *               2 LOAD_FAST                1 (fem)
                     *               4 BINARY_SUBTRACT
                     *               6 RETURN_VALUE
                     */
                    new PyCode(2, 0, 0, 2, 2, 83,
                        Py.bytes(124, 0, 124, 1, 24, 0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(),
                        Py.tuple(Py.str("tolv"), Py.str("fem")),
                        Py.tuple(),
                        Py.tuple(), Py.str("argprog"),
                        Py.str("diff"), 5,
                        Py.bytes(0, 1)), Py.str("p.<locals>.diff"),
                    /*
                     *   8           0 LOAD_FAST                0 (sex)
                     *               2 LOAD_FAST                1 (sju)
                     *               4 BINARY_MULTIPLY
                     *               6 RETURN_VALUE
                     */
                    new PyCode(2, 0, 0, 2, 2, 83,
                        Py.bytes(124, 0, 124, 1, 20, 0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(),
                        Py.tuple(Py.str("sex"), Py.str("sju")),
                        Py.tuple(),
                        Py.tuple(), Py.str("argprog"),
                        Py.str("prod"), 7,
                        Py.bytes(0, 1)), Py.str("p.<locals>.prod"),
                    Py.val(3), Py.val(2)),
                Py.tuple(),
                Py.tuple(Py.str("eins"), Py.str("zwei"),
                    Py.str("sum"), Py.str("diff"), Py.str("prod"),
                    Py.str("drei"), Py.str("six"), Py.str("seven")),
                Py.tuple(),
                Py.tuple(), Py.str("argprog"), Py.str("p"), 2,
                Py.bytes(0, 1, 8, 2, 8, 2, 8, 2, 4, 1, 12, 1, 18,
                    1)), Py.str("p"), Py.val(1), Py.val(2), Py.None),
        Py.tuple(Py.str("p"), Py.str("result")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("argprog"), Py.str("<module>"), 2,
        Py.bytes(8, 12));
    //@formatter:on

    // @Test
    void test_argprog1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(ARGPROG, globals, globals);
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

    /**
     * Example 'closprog_local': <pre>
     * # Program requiring closures made of local variables
     * def p(a, b):
     *     x = a + 1   # =2
     *     def q(c):
     *         y = x + c   # =4
     *         def r(d):
     *             z = y + d   # =6
     *             def s(e):
     *                 return (e + x + y - 1) * z  # =42
     *             return s(d)
     *         return r(c)
     *     return q(b)
     *
     * result = p(1, 2)
     * </pre>
     */
    //@formatter:off
    static final PyCode CLOSPROG_LOCAL =
    /*
     *   2           0 LOAD_CONST               0 (<code object p at 0x000001CED40783A0, file "closprog_local", line 2>)
     *               2 LOAD_CONST               1 ('p')
     *               4 MAKE_FUNCTION            0
     *               6 STORE_NAME               0 (p)
     *
     *  14           8 LOAD_NAME                0 (p)
     *              10 LOAD_CONST               2 (1)
     *              12 LOAD_CONST               3 (2)
     *              14 CALL_FUNCTION            2
     *              16 STORE_NAME               1 (result)
     *              18 LOAD_CONST               4 (None)
     *              20 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 3, 64,
        Py.bytes(100, 0, 100, 1, -124, 0, 90, 0, 101, 0, 100, 2, 100,
            3, -125, 2, 90, 1, 100, 4, 83, 0),
        Py.tuple(
            /*
             *   3           0 LOAD_FAST                0 (a)
             *               2 LOAD_CONST               1 (1)
             *               4 BINARY_ADD
             *               6 STORE_DEREF              0 (x)
             *
             *   4           8 LOAD_CLOSURE             0 (x)
             *              10 BUILD_TUPLE              1
             *              12 LOAD_CONST               2 (<code object q at 0x000001CED40782F0, file "closprog_local", line 4>)
             *              14 LOAD_CONST               3 ('p.<locals>.q')
             *              16 MAKE_FUNCTION            8 (closure)
             *              18 STORE_FAST               2 (q)
             *
             *  12          20 LOAD_FAST                2 (q)
             *              22 LOAD_FAST                1 (b)
             *              24 CALL_FUNCTION            1
             *              26 RETURN_VALUE
             */
            new PyCode(2, 0, 0, 3, 3, 3,
                Py.bytes(124, 0, 100, 1, 23, 0, -119, 0, -121, 0,
                    102, 1, 100, 2, 100, 3, -124, 8, 125, 2, 124, 2,
                    124, 1, -125, 1, 83, 0),
                Py.tuple(Py.None, Py.val(1),
                    /*
                     *   5           0 LOAD_DEREF               1 (x)
                     *               2 LOAD_FAST                0 (c)
                     *               4 BINARY_ADD
                     *               6 STORE_DEREF              0 (y)
                     *
                     *   6           8 LOAD_CLOSURE             1 (x)
                     *              10 LOAD_CLOSURE             0 (y)
                     *              12 BUILD_TUPLE              2
                     *              14 LOAD_CONST               1 (<code object r at 0x000001CED4078240, file "closprog_local", line 6>)
                     *              16 LOAD_CONST               2 ('p.<locals>.q.<locals>.r')
                     *              18 MAKE_FUNCTION            8 (closure)
                     *              20 STORE_FAST               1 (r)
                     *
                     *  11          22 LOAD_FAST                1 (r)
                     *              24 LOAD_FAST                0 (c)
                     *              26 CALL_FUNCTION            1
                     *              28 RETURN_VALUE
                     */
                    new PyCode(1, 0, 0, 2, 3, 19,
                        Py.bytes(-120, 1, 124, 0, 23, 0, -119, 0,
                            -121, 1, -121, 0, 102, 2, 100, 1, 100, 2,
                            -124, 8, 125, 1, 124, 1, 124, 0, -125, 1,
                            83, 0),
                        Py.tuple(Py.None,
                            /*
                             *   7           0 LOAD_DEREF               2 (y)
                             *               2 LOAD_FAST                0 (d)
                             *               4 BINARY_ADD
                             *               6 STORE_DEREF              0 (z)
                             *
                             *   8           8 LOAD_CLOSURE             1 (x)
                             *              10 LOAD_CLOSURE             2 (y)
                             *              12 LOAD_CLOSURE             0 (z)
                             *              14 BUILD_TUPLE              3
                             *              16 LOAD_CONST               1 (<code object s at 0x000001CED4078190, file "closprog_local", line 8>)
                             *              18 LOAD_CONST               2 ('p.<locals>.q.<locals>.r.<locals>.s')
                             *              20 MAKE_FUNCTION            8 (closure)
                             *              22 STORE_FAST               1 (s)
                             *
                             *  10          24 LOAD_FAST                1 (s)
                             *              26 LOAD_FAST                0 (d)
                             *              28 CALL_FUNCTION            1
                             *              30 RETURN_VALUE
                             */
                            new PyCode(1, 0, 0, 2, 3, 19,
                                Py.bytes(-120, 2, 124, 0, 23, 0,
                                    -119, 0, -121, 1, -121, 2, -121,
                                    0, 102, 3, 100, 1, 100, 2, -124,
                                    8, 125, 1, 124, 1, 124, 0, -125,
                                    1, 83, 0),
                                Py.tuple(Py.None,
                                    /*
                                     *   9           0 LOAD_FAST                0 (e)
                                     *               2 LOAD_DEREF               0 (x)
                                     *               4 BINARY_ADD
                                     *               6 LOAD_DEREF               1 (y)
                                     *               8 BINARY_ADD
                                     *              10 LOAD_CONST               1 (1)
                                     *              12 BINARY_SUBTRACT
                                     *              14 LOAD_DEREF               2 (z)
                                     *              16 BINARY_MULTIPLY
                                     *              18 RETURN_VALUE
                                     */
                                    new PyCode(1, 0, 0, 1, 2, 19,
                                        Py.bytes(124, 0, -120, 0, 23,
                                            0, -120, 1, 23, 0, 100,
                                            1, 24, 0, -120, 2, 20, 0,
                                            83, 0),
                                        Py.tuple(Py.None, Py.val(1)),
                                        Py.tuple(),
                                        Py.tuple(Py.str("e")),
                                        Py.tuple(Py.str("x"),
                                            Py.str("y"),
                                            Py.str("z")),
                                        Py.tuple(),
                                        Py.str("closprog_local"),
                                        Py.str("s"), 8,
                                        Py.bytes(0, 1)),
                                    Py.str("p.<locals>.q.<locals>.r.<locals>.s")),
                                Py.tuple(),
                                Py.tuple(Py.str("d"), Py.str("s")),
                                Py.tuple(Py.str("x"), Py.str("y")),
                                Py.tuple(Py.str("z")),
                                Py.str("closprog_local"),
                                Py.str("r"), 6,
                                Py.bytes(0, 1, 8, 1, 16, 2)),
                            Py.str("p.<locals>.q.<locals>.r")),
                        Py.tuple(),
                        Py.tuple(Py.str("c"), Py.str("r")),
                        Py.tuple(Py.str("x")),
                        Py.tuple(Py.str("y")),
                        Py.str("closprog_local"), Py.str("q"), 4,
                        Py.bytes(0, 1, 8, 1, 14, 5)),
                    Py.str("p.<locals>.q")),
                Py.tuple(),
                Py.tuple(Py.str("a"), Py.str("b"), Py.str("q")),
                Py.tuple(),
                Py.tuple(Py.str("x")), Py.str("closprog_local"),
                Py.str("p"), 2,
                Py.bytes(0, 1, 8, 1, 12, 8)), Py.str("p"), Py.val(1),
            Py.val(2), Py.None),
        Py.tuple(Py.str("p"), Py.str("result")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("closprog_local"), Py.str("<module>"), 2,
        Py.bytes(8, 12));
    //@formatter:on

    // @Test
    void test_closprog_local1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(CLOSPROG_LOCAL, globals, globals);
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

    /**
     * Example 'closprog_arg': <pre>
     * # Program requiring closures from arguments
     * def p(r, i):
     *     def sum():
     *         return r + i
     *     def diff():
     *         def q():
     *             return r - i
     *         return q()
     *     def prod():
     *         return r * i
     *     return prod() + sum() + diff()
     *
     * result = p(7, 4)
     * </pre>
     */
    //@formatter:off
    static final PyCode CLOSPROG_ARG =
    /*
     *   2           0 LOAD_CONST               0 (<code object p at 0x000001CED4078710, file "closprog_arg", line 2>)
     *               2 LOAD_CONST               1 ('p')
     *               4 MAKE_FUNCTION            0
     *               6 STORE_NAME               0 (p)
     *
     *  13           8 LOAD_NAME                0 (p)
     *              10 LOAD_CONST               2 (7)
     *              12 LOAD_CONST               3 (4)
     *              14 CALL_FUNCTION            2
     *              16 STORE_NAME               1 (result)
     *              18 LOAD_CONST               4 (None)
     *              20 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 3, 64,
        Py.bytes(100, 0, 100, 1, -124, 0, 90, 0, 101, 0, 100, 2, 100,
            3, -125, 2, 90, 1, 100, 4, 83, 0),
        Py.tuple(
            /*
             *   3           0 LOAD_CLOSURE             0 (i)
             *               2 LOAD_CLOSURE             1 (r)
             *               4 BUILD_TUPLE              2
             *               6 LOAD_CONST               1 (<code object sum at 0x000001CED4078450, file "closprog_arg", line 3>)
             *               8 LOAD_CONST               2 ('p.<locals>.sum')
             *              10 MAKE_FUNCTION            8 (closure)
             *              12 STORE_FAST               2 (sum)
             *
             *   5          14 LOAD_CLOSURE             0 (i)
             *              16 LOAD_CLOSURE             1 (r)
             *              18 BUILD_TUPLE              2
             *              20 LOAD_CONST               3 (<code object diff at 0x000001CED40785B0, file "closprog_arg", line 5>)
             *              22 LOAD_CONST               4 ('p.<locals>.diff')
             *              24 MAKE_FUNCTION            8 (closure)
             *              26 STORE_FAST               3 (diff)
             *
             *   9          28 LOAD_CLOSURE             0 (i)
             *              30 LOAD_CLOSURE             1 (r)
             *              32 BUILD_TUPLE              2
             *              34 LOAD_CONST               5 (<code object prod at 0x000001CED4078660, file "closprog_arg", line 9>)
             *              36 LOAD_CONST               6 ('p.<locals>.prod')
             *              38 MAKE_FUNCTION            8 (closure)
             *              40 STORE_FAST               4 (prod)
             *
             *  11          42 LOAD_FAST                4 (prod)
             *              44 CALL_FUNCTION            0
             *              46 LOAD_FAST                2 (sum)
             *              48 CALL_FUNCTION            0
             *              50 BINARY_ADD
             *              52 LOAD_FAST                3 (diff)
             *              54 CALL_FUNCTION            0
             *              56 BINARY_ADD
             *              58 RETURN_VALUE
             */
            new PyCode(2, 0, 0, 5, 3, 3,
                Py.bytes(-121, 0, -121, 1, 102, 2, 100, 1, 100, 2,
                    -124, 8, 125, 2, -121, 0, -121, 1, 102, 2, 100,
                    3, 100, 4, -124, 8, 125, 3, -121, 0, -121, 1,
                    102, 2, 100, 5, 100, 6, -124, 8, 125, 4, 124, 4,
                    -125, 0, 124, 2, -125, 0, 23, 0, 124, 3, -125, 0,
                    23, 0, 83, 0),
                Py.tuple(Py.None,
                    /*
                     *   4           0 LOAD_DEREF               1 (r)
                     *               2 LOAD_DEREF               0 (i)
                     *               4 BINARY_ADD
                     *               6 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 0, 2, 19,
                        Py.bytes(-120, 1, -120, 0, 23, 0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(),
                        Py.tuple(),
                        Py.tuple(Py.str("i"), Py.str("r")),
                        Py.tuple(), Py.str("closprog_arg"),
                        Py.str("sum"), 3,
                        Py.bytes(0, 1)), Py.str("p.<locals>.sum"),
                    /*
                     *   6           0 LOAD_CLOSURE             0 (i)
                     *               2 LOAD_CLOSURE             1 (r)
                     *               4 BUILD_TUPLE              2
                     *               6 LOAD_CONST               1 (<code object q at 0x000001CED4078500, file "closprog_arg", line 6>)
                     *               8 LOAD_CONST               2 ('p.<locals>.diff.<locals>.q')
                     *              10 MAKE_FUNCTION            8 (closure)
                     *              12 STORE_FAST               0 (q)
                     *
                     *   8          14 LOAD_FAST                0 (q)
                     *              16 CALL_FUNCTION            0
                     *              18 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 1, 3, 19,
                        Py.bytes(-121, 0, -121, 1, 102, 2, 100, 1,
                            100, 2, -124, 8, 125, 0, 124, 0, -125, 0,
                            83, 0),
                        Py.tuple(Py.None,
                            /*
                             *   7           0 LOAD_DEREF               1 (r)
                             *               2 LOAD_DEREF               0 (i)
                             *               4 BINARY_SUBTRACT
                             *               6 RETURN_VALUE
                             */
                            new PyCode(0, 0, 0, 0, 2, 19,
                                Py.bytes(-120, 1, -120, 0, 24, 0, 83,
                                    0),
                                Py.tuple(Py.None),
                                Py.tuple(),
                                Py.tuple(),
                                Py.tuple(Py.str("i"), Py.str("r")),
                                Py.tuple(), Py.str("closprog_arg"),
                                Py.str("q"), 6,
                                Py.bytes(0, 1)),
                            Py.str("p.<locals>.diff.<locals>.q")),
                        Py.tuple(),
                        Py.tuple(Py.str("q")),
                        Py.tuple(Py.str("i"), Py.str("r")),
                        Py.tuple(), Py.str("closprog_arg"),
                        Py.str("diff"), 5,
                        Py.bytes(0, 1, 14, 2)),
                    Py.str("p.<locals>.diff"),
                    /*
                     *  10           0 LOAD_DEREF               1 (r)
                     *               2 LOAD_DEREF               0 (i)
                     *               4 BINARY_MULTIPLY
                     *               6 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 0, 2, 19,
                        Py.bytes(-120, 1, -120, 0, 20, 0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(),
                        Py.tuple(),
                        Py.tuple(Py.str("i"), Py.str("r")),
                        Py.tuple(), Py.str("closprog_arg"),
                        Py.str("prod"), 9,
                        Py.bytes(0, 1)), Py.str("p.<locals>.prod")),
                Py.tuple(),
                Py.tuple(Py.str("r"), Py.str("i"), Py.str("sum"),
                    Py.str("diff"), Py.str("prod")),
                Py.tuple(),
                Py.tuple(Py.str("i"), Py.str("r")),
                Py.str("closprog_arg"), Py.str("p"), 2,
                Py.bytes(0, 1, 14, 2, 14, 4, 14, 2)), Py.str("p"),
            Py.val(7), Py.val(4), Py.None),
        Py.tuple(Py.str("p"), Py.str("result")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("closprog_arg"), Py.str("<module>"), 2,
        Py.bytes(8, 11));
    //@formatter:on

    // @Test
    void test_closprog_arg1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(CLOSPROG_ARG, globals, globals);
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

    /**
     * Example 'closprog_mix': <pre>
     * # Program requiring closures (mixed)
     * def p(ua, b):   #(1,2)
     *     z = ua + b # 3
     *     def q(uc, d):   #(1,3)
     *         y = ua + uc + z # 5
     *         def r(ue, f):   #(1,5)
     *             x = (ua + uc) + (ue + f) + (y + z) # 16
     *             def s(uf, g):   # (1,16)
     *                 return (ua + uc - ue) + (uf + g) + (x + y + z)
     *             return s(ue, x)
     *         return r(uc, y)
     *     return q(ua, z)
     *
     * result = p(1, 2)
     * </pre>
     */
    //@formatter:off
    static final PyCode CLOSPROG_MIX =
    /*
     *   2           0 LOAD_CONST               0 (<code object p at 0x000001CED40789D0, file "closprog_mix", line 2>)
     *               2 LOAD_CONST               1 ('p')
     *               4 MAKE_FUNCTION            0
     *               6 STORE_NAME               0 (p)
     *
     *  14           8 LOAD_NAME                0 (p)
     *              10 LOAD_CONST               2 (1)
     *              12 LOAD_CONST               3 (2)
     *              14 CALL_FUNCTION            2
     *              16 STORE_NAME               1 (result)
     *              18 LOAD_CONST               4 (None)
     *              20 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 3, 64,
        Py.bytes(100, 0, 100, 1, -124, 0, 90, 0, 101, 0, 100, 2, 100,
            3, -125, 2, 90, 1, 100, 4, 83, 0),
        Py.tuple(
            /*
             *   3           0 LOAD_DEREF               0 (ua)
             *               2 LOAD_FAST                1 (b)
             *               4 BINARY_ADD
             *               6 STORE_DEREF              1 (z)
             *
             *   4           8 LOAD_CLOSURE             0 (ua)
             *              10 LOAD_CLOSURE             1 (z)
             *              12 BUILD_TUPLE              2
             *              14 LOAD_CONST               1 (<code object q at 0x000001CED4078920, file "closprog_mix", line 4>)
             *              16 LOAD_CONST               2 ('p.<locals>.q')
             *              18 MAKE_FUNCTION            8 (closure)
             *              20 STORE_FAST               2 (q)
             *
             *  12          22 LOAD_FAST                2 (q)
             *              24 LOAD_DEREF               0 (ua)
             *              26 LOAD_DEREF               1 (z)
             *              28 CALL_FUNCTION            2
             *              30 RETURN_VALUE
             */
            new PyCode(2, 0, 0, 3, 3, 3,
                Py.bytes(-120, 0, 124, 1, 23, 0, -119, 1, -121, 0,
                    -121, 1, 102, 2, 100, 1, 100, 2, -124, 8, 125, 2,
                    124, 2, -120, 0, -120, 1, -125, 2, 83, 0),
                Py.tuple(Py.None,
                    /*
                     *   5           0 LOAD_DEREF               2 (ua)
                     *               2 LOAD_DEREF               0 (uc)
                     *               4 BINARY_ADD
                     *               6 LOAD_DEREF               3 (z)
                     *               8 BINARY_ADD
                     *              10 STORE_DEREF              1 (y)
                     *
                     *   6          12 LOAD_CLOSURE             2 (ua)
                     *              14 LOAD_CLOSURE             0 (uc)
                     *              16 LOAD_CLOSURE             1 (y)
                     *              18 LOAD_CLOSURE             3 (z)
                     *              20 BUILD_TUPLE              4
                     *              22 LOAD_CONST               1 (<code object r at 0x000001CED4078870, file "closprog_mix", line 6>)
                     *              24 LOAD_CONST               2 ('p.<locals>.q.<locals>.r')
                     *              26 MAKE_FUNCTION            8 (closure)
                     *              28 STORE_FAST               2 (r)
                     *
                     *  11          30 LOAD_FAST                2 (r)
                     *              32 LOAD_DEREF               0 (uc)
                     *              34 LOAD_DEREF               1 (y)
                     *              36 CALL_FUNCTION            2
                     *              38 RETURN_VALUE
                     */
                    new PyCode(2, 0, 0, 3, 4, 19,
                        Py.bytes(-120, 2, -120, 0, 23, 0, -120, 3,
                            23, 0, -119, 1, -121, 2, -121, 0, -121,
                            1, -121, 3, 102, 4, 100, 1, 100, 2, -124,
                            8, 125, 2, 124, 2, -120, 0, -120, 1,
                            -125, 2, 83, 0),
                        Py.tuple(Py.None,
                            /*
                             *   7           0 LOAD_DEREF               2 (ua)
                             *               2 LOAD_DEREF               3 (uc)
                             *               4 BINARY_ADD
                             *               6 LOAD_DEREF               0 (ue)
                             *               8 LOAD_FAST                1 (f)
                             *              10 BINARY_ADD
                             *              12 BINARY_ADD
                             *              14 LOAD_DEREF               4 (y)
                             *              16 LOAD_DEREF               5 (z)
                             *              18 BINARY_ADD
                             *              20 BINARY_ADD
                             *              22 STORE_DEREF              1 (x)
                             *
                             *   8          24 LOAD_CLOSURE             2 (ua)
                             *              26 LOAD_CLOSURE             3 (uc)
                             *              28 LOAD_CLOSURE             0 (ue)
                             *              30 LOAD_CLOSURE             1 (x)
                             *              32 LOAD_CLOSURE             4 (y)
                             *              34 LOAD_CLOSURE             5 (z)
                             *              36 BUILD_TUPLE              6
                             *              38 LOAD_CONST               1 (<code object s at 0x000001CED40787C0, file "closprog_mix", line 8>)
                             *              40 LOAD_CONST               2 ('p.<locals>.q.<locals>.r.<locals>.s')
                             *              42 MAKE_FUNCTION            8 (closure)
                             *              44 STORE_FAST               2 (s)
                             *
                             *  10          46 LOAD_FAST                2 (s)
                             *              48 LOAD_DEREF               0 (ue)
                             *              50 LOAD_DEREF               1 (x)
                             *              52 CALL_FUNCTION            2
                             *              54 RETURN_VALUE
                             */
                            new PyCode(2, 0, 0, 3, 6, 19,
                                Py.bytes(-120, 2, -120, 3, 23, 0,
                                    -120, 0, 124, 1, 23, 0, 23, 0,
                                    -120, 4, -120, 5, 23, 0, 23, 0,
                                    -119, 1, -121, 2, -121, 3, -121,
                                    0, -121, 1, -121, 4, -121, 5,
                                    102, 6, 100, 1, 100, 2, -124, 8,
                                    125, 2, 124, 2, -120, 0, -120, 1,
                                    -125, 2, 83, 0),
                                Py.tuple(Py.None,
                                    /*
                                     *   9           0 LOAD_DEREF               0 (ua)
                                     *               2 LOAD_DEREF               1 (uc)
                                     *               4 BINARY_ADD
                                     *               6 LOAD_DEREF               2 (ue)
                                     *               8 BINARY_SUBTRACT
                                     *              10 LOAD_FAST                0 (uf)
                                     *              12 LOAD_FAST                1 (g)
                                     *              14 BINARY_ADD
                                     *              16 BINARY_ADD
                                     *              18 LOAD_DEREF               3 (x)
                                     *              20 LOAD_DEREF               4 (y)
                                     *              22 BINARY_ADD
                                     *              24 LOAD_DEREF               5 (z)
                                     *              26 BINARY_ADD
                                     *              28 BINARY_ADD
                                     *              30 RETURN_VALUE
                                     */
                                    new PyCode(2, 0, 0, 2, 3, 19,
                                        Py.bytes(-120, 0, -120, 1,
                                            23, 0, -120, 2, 24, 0,
                                            124, 0, 124, 1, 23, 0,
                                            23, 0, -120, 3, -120, 4,
                                            23, 0, -120, 5, 23, 0,
                                            23, 0, 83, 0),
                                        Py.tuple(Py.None),
                                        Py.tuple(),
                                        Py.tuple(Py.str("uf"),
                                            Py.str("g")),
                                        Py.tuple(Py.str("ua"),
                                            Py.str("uc"),
                                            Py.str("ue"),
                                            Py.str("x"), Py.str("y"),
                                            Py.str("z")),
                                        Py.tuple(),
                                        Py.str("closprog_mix"),
                                        Py.str("s"), 8,
                                        Py.bytes(0, 1)),
                                    Py.str("p.<locals>.q.<locals>.r.<locals>.s")),
                                Py.tuple(),
                                Py.tuple(Py.str("ue"), Py.str("f"),
                                    Py.str("s")),
                                Py.tuple(Py.str("ua"), Py.str("uc"),
                                    Py.str("y"), Py.str("z")),
                                Py.tuple(Py.str("ue"), Py.str("x")),
                                Py.str("closprog_mix"), Py.str("r"),
                                6,
                                Py.bytes(0, 1, 24, 1, 22, 2)),
                            Py.str("p.<locals>.q.<locals>.r")),
                        Py.tuple(),
                        Py.tuple(Py.str("uc"), Py.str("d"),
                            Py.str("r")),
                        Py.tuple(Py.str("ua"), Py.str("z")),
                        Py.tuple(Py.str("uc"), Py.str("y")),
                        Py.str("closprog_mix"), Py.str("q"), 4,
                        Py.bytes(0, 1, 12, 1, 18, 5)),
                    Py.str("p.<locals>.q")),
                Py.tuple(),
                Py.tuple(Py.str("ua"), Py.str("b"), Py.str("q")),
                Py.tuple(),
                Py.tuple(Py.str("ua"), Py.str("z")),
                Py.str("closprog_mix"), Py.str("p"), 2,
                Py.bytes(0, 1, 8, 1, 14, 8)), Py.str("p"), Py.val(1),
            Py.val(2), Py.None),
        Py.tuple(Py.str("p"), Py.str("result")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("closprog_mix"), Py.str("<module>"), 2,
        Py.bytes(8, 12));
    //@formatter:on

    // @Test
    void test_closprog_mix1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(CLOSPROG_MIX, globals, globals);
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

    /**
     * Example 'kwargprog_a': <pre>
     * # Program where functions have keyword arguments
     * def p(r, i=4):
     *     def sum(r, q, *args, j, i, **kwargs):
     *         mysum = r + i
     *         return mysum
     *     def diff():
     *         def q():
     *             return r - i
     *         return q()
     *     def prod():
     *         return r * i
     *     s = sum(r, 1, 2, 3, i=i, j=0, k="hello", l="world")
     *     return prod() + s + diff()
     *
     * result = p(7, 4)
     * </pre>
     */
    //@formatter:off
    static final PyCode KWARGPROG_A =
    /*
     *   2           0 LOAD_CONST               5 ((4,))
     *               2 LOAD_CONST               1 (<code object p at 0x000001CED4078D40, file "kwargprog_a", line 2>)
     *               4 LOAD_CONST               2 ('p')
     *               6 MAKE_FUNCTION            1 (defaults)
     *               8 STORE_NAME               0 (p)
     *
     *  15          10 LOAD_NAME                0 (p)
     *              12 LOAD_CONST               3 (7)
     *              14 LOAD_CONST               0 (4)
     *              16 CALL_FUNCTION            2
     *              18 STORE_NAME               1 (result)
     *              20 LOAD_CONST               4 (None)
     *              22 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 3, 64,
        Py.bytes(100, 5, 100, 1, 100, 2, -124, 1, 90, 0, 101, 0, 100,
            3, 100, 0, -125, 2, 90, 1, 100, 4, 83, 0),
        Py.tuple(Py.val(4),
            /*
             *   3           0 LOAD_CONST               1 (<code object sum at 0x000001CED4078A80, file "kwargprog_a", line 3>)
             *               2 LOAD_CONST               2 ('p.<locals>.sum')
             *               4 MAKE_FUNCTION            0
             *               6 STORE_FAST               2 (sum)
             *
             *   6           8 LOAD_CLOSURE             0 (i)
             *              10 LOAD_CLOSURE             1 (r)
             *              12 BUILD_TUPLE              2
             *              14 LOAD_CONST               3 (<code object diff at 0x000001CED4078BE0, file "kwargprog_a", line 6>)
             *              16 LOAD_CONST               4 ('p.<locals>.diff')
             *              18 MAKE_FUNCTION            8 (closure)
             *              20 STORE_FAST               3 (diff)
             *
             *  10          22 LOAD_CLOSURE             0 (i)
             *              24 LOAD_CLOSURE             1 (r)
             *              26 BUILD_TUPLE              2
             *              28 LOAD_CONST               5 (<code object prod at 0x000001CED4078C90, file "kwargprog_a", line 10>)
             *              30 LOAD_CONST               6 ('p.<locals>.prod')
             *              32 MAKE_FUNCTION            8 (closure)
             *              34 STORE_FAST               4 (prod)
             *
             *  12          36 LOAD_FAST                2 (sum)
             *              38 LOAD_DEREF               1 (r)
             *              40 LOAD_CONST               7 (1)
             *              42 LOAD_CONST               8 (2)
             *              44 LOAD_CONST               9 (3)
             *              46 LOAD_DEREF               0 (i)
             *              48 LOAD_CONST              10 (0)
             *              50 LOAD_CONST              11 ('hello')
             *              52 LOAD_CONST              12 ('world')
             *              54 LOAD_CONST              13 (('i', 'j', 'k', 'l'))
             *              56 CALL_FUNCTION_KW         8
             *              58 STORE_FAST               5 (s)
             *
             *  13          60 LOAD_FAST                4 (prod)
             *              62 CALL_FUNCTION            0
             *              64 LOAD_FAST                5 (s)
             *              66 BINARY_ADD
             *              68 LOAD_FAST                3 (diff)
             *              70 CALL_FUNCTION            0
             *              72 BINARY_ADD
             *              74 RETURN_VALUE
             */
            new PyCode(2, 0, 0, 6, 10, 3,
                Py.bytes(100, 1, 100, 2, -124, 0, 125, 2, -121, 0,
                    -121, 1, 102, 2, 100, 3, 100, 4, -124, 8, 125, 3,
                    -121, 0, -121, 1, 102, 2, 100, 5, 100, 6, -124,
                    8, 125, 4, 124, 2, -120, 1, 100, 7, 100, 8, 100,
                    9, -120, 0, 100, 10, 100, 11, 100, 12, 100, 13,
                    -115, 8, 125, 5, 124, 4, -125, 0, 124, 5, 23, 0,
                    124, 3, -125, 0, 23, 0, 83, 0),
                Py.tuple(Py.None,
                    /*
                     *   4           0 LOAD_FAST                0 (r)
                     *               2 LOAD_FAST                3 (i)
                     *               4 BINARY_ADD
                     *               6 STORE_FAST               6 (mysum)
                     *
                     *   5           8 LOAD_FAST                6 (mysum)
                     *              10 RETURN_VALUE
                     */
                    new PyCode(2, 0, 2, 7, 2, 95,
                        Py.bytes(124, 0, 124, 3, 23, 0, 125, 6, 124,
                            6, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(),
                        Py.tuple(Py.str("r"), Py.str("q"),
                            Py.str("j"), Py.str("i"), Py.str("args"),
                            Py.str("kwargs"), Py.str("mysum")),
                        Py.tuple(),
                        Py.tuple(), Py.str("kwargprog_a"),
                        Py.str("sum"), 3,
                        Py.bytes(0, 1, 8, 1)),
                    Py.str("p.<locals>.sum"),
                    /*
                     *   7           0 LOAD_CLOSURE             0 (i)
                     *               2 LOAD_CLOSURE             1 (r)
                     *               4 BUILD_TUPLE              2
                     *               6 LOAD_CONST               1 (<code object q at 0x000001CED4078B30, file "kwargprog_a", line 7>)
                     *               8 LOAD_CONST               2 ('p.<locals>.diff.<locals>.q')
                     *              10 MAKE_FUNCTION            8 (closure)
                     *              12 STORE_FAST               0 (q)
                     *
                     *   9          14 LOAD_FAST                0 (q)
                     *              16 CALL_FUNCTION            0
                     *              18 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 1, 3, 19,
                        Py.bytes(-121, 0, -121, 1, 102, 2, 100, 1,
                            100, 2, -124, 8, 125, 0, 124, 0, -125, 0,
                            83, 0),
                        Py.tuple(Py.None,
                            /*
                             *   8           0 LOAD_DEREF               1 (r)
                             *               2 LOAD_DEREF               0 (i)
                             *               4 BINARY_SUBTRACT
                             *               6 RETURN_VALUE
                             */
                            new PyCode(0, 0, 0, 0, 2, 19,
                                Py.bytes(-120, 1, -120, 0, 24, 0, 83,
                                    0),
                                Py.tuple(Py.None),
                                Py.tuple(),
                                Py.tuple(),
                                Py.tuple(Py.str("i"), Py.str("r")),
                                Py.tuple(), Py.str("kwargprog_a"),
                                Py.str("q"), 7,
                                Py.bytes(0, 1)),
                            Py.str("p.<locals>.diff.<locals>.q")),
                        Py.tuple(),
                        Py.tuple(Py.str("q")),
                        Py.tuple(Py.str("i"), Py.str("r")),
                        Py.tuple(), Py.str("kwargprog_a"),
                        Py.str("diff"), 6,
                        Py.bytes(0, 1, 14, 2)),
                    Py.str("p.<locals>.diff"),
                    /*
                     *  11           0 LOAD_DEREF               1 (r)
                     *               2 LOAD_DEREF               0 (i)
                     *               4 BINARY_MULTIPLY
                     *               6 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 0, 2, 19,
                        Py.bytes(-120, 1, -120, 0, 20, 0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(),
                        Py.tuple(),
                        Py.tuple(Py.str("i"), Py.str("r")),
                        Py.tuple(), Py.str("kwargprog_a"),
                        Py.str("prod"), 10,
                        Py.bytes(0, 1)), Py.str("p.<locals>.prod"),
                    Py.val(1), Py.val(2), Py.val(3), Py.val(0),
                    Py.str("hello"), Py.str("world"),
                    Py.tuple(Py.str("i"), Py.str("j"), Py.str("k"),
                        Py.str("l"))),
                Py.tuple(),
                Py.tuple(Py.str("r"), Py.str("i"), Py.str("sum"),
                    Py.str("diff"), Py.str("prod"), Py.str("s")),
                Py.tuple(),
                Py.tuple(Py.str("i"), Py.str("r")),
                Py.str("kwargprog_a"), Py.str("p"), 2,
                Py.bytes(0, 1, 8, 3, 14, 4, 14, 2, 24, 1)),
            Py.str("p"), Py.val(7), Py.None,
            Py.tuple(Py.val(4))),
        Py.tuple(Py.str("p"), Py.str("result")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("kwargprog_a"), Py.str("<module>"), 2,
        Py.bytes(10, 13));
    //@formatter:on

    // @Test
    void test_kwargprog_a1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(KWARGPROG_A, globals, globals);
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

    /**
     * Example 'kwargcell': <pre>
     * # Program where a default value is a non-local (cell)
     * def p(i):
     *     def q():
     *         def r(m=i):
     *             i = 43
     *             return m
     *         return r()
     *     return q()
     *
     * result = p(42)
     * </pre>
     */
    //@formatter:off
    static final PyCode KWARGCELL =
    /*
     *   2           0 LOAD_CONST               0 (<code object p at 0x000001CED4078F50, file "kwargcell", line 2>)
     *               2 LOAD_CONST               1 ('p')
     *               4 MAKE_FUNCTION            0
     *               6 STORE_NAME               0 (p)
     *
     *  10           8 LOAD_NAME                0 (p)
     *              10 LOAD_CONST               2 (42)
     *              12 CALL_FUNCTION            1
     *              14 STORE_NAME               1 (result)
     *              16 LOAD_CONST               3 (None)
     *              18 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 2, 64,
        Py.bytes(100, 0, 100, 1, -124, 0, 90, 0, 101, 0, 100, 2,
            -125, 1, 90, 1, 100, 3, 83, 0),
        Py.tuple(
            /*
             *   3           0 LOAD_CLOSURE             0 (i)
             *               2 BUILD_TUPLE              1
             *               4 LOAD_CONST               1 (<code object q at 0x000001CED4078EA0, file "kwargcell", line 3>)
             *               6 LOAD_CONST               2 ('p.<locals>.q')
             *               8 MAKE_FUNCTION            8 (closure)
             *              10 STORE_FAST               1 (q)
             *
             *   8          12 LOAD_FAST                1 (q)
             *              14 CALL_FUNCTION            0
             *              16 RETURN_VALUE
             */
            new PyCode(1, 0, 0, 2, 3, 3,
                Py.bytes(-121, 0, 102, 1, 100, 1, 100, 2, -124, 8,
                    125, 1, 124, 1, -125, 0, 83, 0),
                Py.tuple(Py.None,
                    /*
                     *   4           0 LOAD_DEREF               0 (i)
                     *               2 BUILD_TUPLE              1
                     *               4 LOAD_CONST               1 (<code object r at 0x000001CED4078DF0, file "kwargcell", line 4>)
                     *               6 LOAD_CONST               2 ('p.<locals>.q.<locals>.r')
                     *               8 MAKE_FUNCTION            1 (defaults)
                     *              10 STORE_FAST               0 (r)
                     *
                     *   7          12 LOAD_FAST                0 (r)
                     *              14 CALL_FUNCTION            0
                     *              16 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 1, 3, 19,
                        Py.bytes(-120, 0, 102, 1, 100, 1, 100, 2,
                            -124, 1, 125, 0, 124, 0, -125, 0, 83, 0),
                        Py.tuple(Py.None,
                            /*
                             *   5           0 LOAD_CONST               1 (43)
                             *               2 STORE_FAST               1 (i)
                             *
                             *   6           4 LOAD_FAST                0 (m)
                             *               6 RETURN_VALUE
                             */
                            new PyCode(1, 0, 0, 2, 1, 83,
                                Py.bytes(100, 1, 125, 1, 124, 0, 83,
                                    0),
                                Py.tuple(Py.None, Py.val(43)),
                                Py.tuple(),
                                Py.tuple(Py.str("m"), Py.str("i")),
                                Py.tuple(),
                                Py.tuple(), Py.str("kwargcell"),
                                Py.str("r"), 4,
                                Py.bytes(0, 1, 4, 1)),
                            Py.str("p.<locals>.q.<locals>.r")),
                        Py.tuple(),
                        Py.tuple(Py.str("r")),
                        Py.tuple(Py.str("i")),
                        Py.tuple(), Py.str("kwargcell"), Py.str("q"),
                        3,
                        Py.bytes(0, 1, 12, 3)),
                    Py.str("p.<locals>.q")),
                Py.tuple(),
                Py.tuple(Py.str("i"), Py.str("q")),
                Py.tuple(),
                Py.tuple(Py.str("i")), Py.str("kwargcell"),
                Py.str("p"), 2,
                Py.bytes(0, 1, 12, 5)), Py.str("p"), Py.val(42),
            Py.None),
        Py.tuple(Py.str("p"), Py.str("result")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("kwargcell"), Py.str("<module>"), 2,
        Py.bytes(8, 8));
    //@formatter:on

    // @Test
    void test_kwargcell1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(KWARGCELL, globals, globals);
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

    /**
     * Example 'kwargprog_b': <pre>
     * # Program where functions have keyword arguments
     * def p(r, i=4):
     *     def sum(r, q, *args, j, i, **kwargs):
     *         mysum = r + i
     *         return mysum
     *     def diff():
     *         def q():
     *             return r - i
     *         return q()
     *     def prod():
     *         return r * i
     *     ar = (1, 2, 3)
     *     s = sum(r, *ar, i=i, j=0, k="hello", l="world")
     *     return prod() + s + diff()
     *
     * result = p(7, 4)
     * </pre>
     */
    //@formatter:off
    static final PyCode KWARGPROG_B =
    /*
     *   2           0 LOAD_CONST               5 ((4,))
     *               2 LOAD_CONST               1 (<code object p at 0x000001CED406C2F0, file "kwargprog_b", line 2>)
     *               4 LOAD_CONST               2 ('p')
     *               6 MAKE_FUNCTION            1 (defaults)
     *               8 STORE_NAME               0 (p)
     *
     *  16          10 LOAD_NAME                0 (p)
     *              12 LOAD_CONST               3 (7)
     *              14 LOAD_CONST               0 (4)
     *              16 CALL_FUNCTION            2
     *              18 STORE_NAME               1 (result)
     *              20 LOAD_CONST               4 (None)
     *              22 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 3, 64,
        Py.bytes(100, 5, 100, 1, 100, 2, -124, 1, 90, 0, 101, 0, 100,
            3, 100, 0, -125, 2, 90, 1, 100, 4, 83, 0),
        Py.tuple(Py.val(4),
            /*
             *   3           0 LOAD_CONST               1 (<code object sum at 0x000001CED406C030, file "kwargprog_b", line 3>)
             *               2 LOAD_CONST               2 ('p.<locals>.sum')
             *               4 MAKE_FUNCTION            0
             *               6 STORE_FAST               2 (sum)
             *
             *   6           8 LOAD_CLOSURE             0 (i)
             *              10 LOAD_CLOSURE             1 (r)
             *              12 BUILD_TUPLE              2
             *              14 LOAD_CONST               3 (<code object diff at 0x000001CED406C190, file "kwargprog_b", line 6>)
             *              16 LOAD_CONST               4 ('p.<locals>.diff')
             *              18 MAKE_FUNCTION            8 (closure)
             *              20 STORE_FAST               3 (diff)
             *
             *  10          22 LOAD_CLOSURE             0 (i)
             *              24 LOAD_CLOSURE             1 (r)
             *              26 BUILD_TUPLE              2
             *              28 LOAD_CONST               5 (<code object prod at 0x000001CED406C240, file "kwargprog_b", line 10>)
             *              30 LOAD_CONST               6 ('p.<locals>.prod')
             *              32 MAKE_FUNCTION            8 (closure)
             *              34 STORE_FAST               4 (prod)
             *
             *  12          36 LOAD_CONST               7 ((1, 2, 3))
             *              38 STORE_FAST               5 (ar)
             *
             *  13          40 LOAD_FAST                2 (sum)
             *              42 LOAD_DEREF               1 (r)
             *              44 BUILD_TUPLE              1
             *              46 LOAD_FAST                5 (ar)
             *              48 BUILD_TUPLE_UNPACK_WITH_CALL     2
             *              50 LOAD_DEREF               0 (i)
             *              52 LOAD_CONST               8 (0)
             *              54 LOAD_CONST               9 ('hello')
             *              56 LOAD_CONST              10 ('world')
             *              58 LOAD_CONST              11 (('i', 'j', 'k', 'l'))
             *              60 BUILD_CONST_KEY_MAP      4
             *              62 CALL_FUNCTION_EX         1
             *              64 STORE_FAST               6 (s)
             *
             *  14          66 LOAD_FAST                4 (prod)
             *              68 CALL_FUNCTION            0
             *              70 LOAD_FAST                6 (s)
             *              72 BINARY_ADD
             *              74 LOAD_FAST                3 (diff)
             *              76 CALL_FUNCTION            0
             *              78 BINARY_ADD
             *              80 RETURN_VALUE
             */
            new PyCode(2, 0, 0, 7, 7, 3,
                Py.bytes(100, 1, 100, 2, -124, 0, 125, 2, -121, 0,
                    -121, 1, 102, 2, 100, 3, 100, 4, -124, 8, 125, 3,
                    -121, 0, -121, 1, 102, 2, 100, 5, 100, 6, -124,
                    8, 125, 4, 100, 7, 125, 5, 124, 2, -120, 1, 102,
                    1, 124, 5, -98, 2, -120, 0, 100, 8, 100, 9, 100,
                    10, 100, 11, -100, 4, -114, 1, 125, 6, 124, 4,
                    -125, 0, 124, 6, 23, 0, 124, 3, -125, 0, 23, 0,
                    83, 0),
                Py.tuple(Py.None,
                    /*
                     *   4           0 LOAD_FAST                0 (r)
                     *               2 LOAD_FAST                3 (i)
                     *               4 BINARY_ADD
                     *               6 STORE_FAST               6 (mysum)
                     *
                     *   5           8 LOAD_FAST                6 (mysum)
                     *              10 RETURN_VALUE
                     */
                    new PyCode(2, 0, 2, 7, 2, 95,
                        Py.bytes(124, 0, 124, 3, 23, 0, 125, 6, 124,
                            6, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(),
                        Py.tuple(Py.str("r"), Py.str("q"),
                            Py.str("j"), Py.str("i"), Py.str("args"),
                            Py.str("kwargs"), Py.str("mysum")),
                        Py.tuple(),
                        Py.tuple(), Py.str("kwargprog_b"),
                        Py.str("sum"), 3,
                        Py.bytes(0, 1, 8, 1)),
                    Py.str("p.<locals>.sum"),
                    /*
                     *   7           0 LOAD_CLOSURE             0 (i)
                     *               2 LOAD_CLOSURE             1 (r)
                     *               4 BUILD_TUPLE              2
                     *               6 LOAD_CONST               1 (<code object q at 0x000001CED406C0E0, file "kwargprog_b", line 7>)
                     *               8 LOAD_CONST               2 ('p.<locals>.diff.<locals>.q')
                     *              10 MAKE_FUNCTION            8 (closure)
                     *              12 STORE_FAST               0 (q)
                     *
                     *   9          14 LOAD_FAST                0 (q)
                     *              16 CALL_FUNCTION            0
                     *              18 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 1, 3, 19,
                        Py.bytes(-121, 0, -121, 1, 102, 2, 100, 1,
                            100, 2, -124, 8, 125, 0, 124, 0, -125, 0,
                            83, 0),
                        Py.tuple(Py.None,
                            /*
                             *   8           0 LOAD_DEREF               1 (r)
                             *               2 LOAD_DEREF               0 (i)
                             *               4 BINARY_SUBTRACT
                             *               6 RETURN_VALUE
                             */
                            new PyCode(0, 0, 0, 0, 2, 19,
                                Py.bytes(-120, 1, -120, 0, 24, 0, 83,
                                    0),
                                Py.tuple(Py.None),
                                Py.tuple(),
                                Py.tuple(),
                                Py.tuple(Py.str("i"), Py.str("r")),
                                Py.tuple(), Py.str("kwargprog_b"),
                                Py.str("q"), 7,
                                Py.bytes(0, 1)),
                            Py.str("p.<locals>.diff.<locals>.q")),
                        Py.tuple(),
                        Py.tuple(Py.str("q")),
                        Py.tuple(Py.str("i"), Py.str("r")),
                        Py.tuple(), Py.str("kwargprog_b"),
                        Py.str("diff"), 6,
                        Py.bytes(0, 1, 14, 2)),
                    Py.str("p.<locals>.diff"),
                    /*
                     *  11           0 LOAD_DEREF               1 (r)
                     *               2 LOAD_DEREF               0 (i)
                     *               4 BINARY_MULTIPLY
                     *               6 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 0, 2, 19,
                        Py.bytes(-120, 1, -120, 0, 20, 0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(),
                        Py.tuple(),
                        Py.tuple(Py.str("i"), Py.str("r")),
                        Py.tuple(), Py.str("kwargprog_b"),
                        Py.str("prod"), 10,
                        Py.bytes(0, 1)), Py.str("p.<locals>.prod"),
                    Py.tuple(Py.val(1), Py.val(2), Py.val(3)),
                    Py.val(0), Py.str("hello"), Py.str("world"),
                    Py.tuple(Py.str("i"), Py.str("j"), Py.str("k"),
                        Py.str("l"))),
                Py.tuple(),
                Py.tuple(Py.str("r"), Py.str("i"), Py.str("sum"),
                    Py.str("diff"), Py.str("prod"), Py.str("ar"),
                    Py.str("s")),
                Py.tuple(),
                Py.tuple(Py.str("i"), Py.str("r")),
                Py.str("kwargprog_b"), Py.str("p"), 2,
                Py.bytes(0, 1, 8, 3, 14, 4, 14, 2, 4, 1, 26, 1)),
            Py.str("p"), Py.val(7), Py.None,
            Py.tuple(Py.val(4))),
        Py.tuple(Py.str("p"), Py.str("result")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("kwargprog_b"), Py.str("<module>"), 2,
        Py.bytes(10, 14));
    //@formatter:on

    // @Test
    void test_kwargprog_b1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(KWARGPROG_B, globals, globals);
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

    /**
     * Example 'kwargprog_c': <pre>
     * # Program where functions have keyword arguments
     * def p(r, i=4):
     *     def sum(r, q, *args, j, i, **kwargs):
     *         mysum = r + i
     *         return mysum
     *     def diff():
     *         def q():
     *             return r - i
     *         return q()
     *     def prod():
     *         return r * i
     *     kw = { 'q':1, 'i':i, 'k':"hello" }
     *     s = sum(r, j=0, l="world", **kw)
     *     return prod() + s + diff()
     *
     * result = p(7, 4)
     * </pre>
     */
    //@formatter:off
    static final PyCode KWARGPROG_C =
    /*
     *   2           0 LOAD_CONST               5 ((4,))
     *               2 LOAD_CONST               1 (<code object p at 0x000001CED406C660, file "kwargprog_c", line 2>)
     *               4 LOAD_CONST               2 ('p')
     *               6 MAKE_FUNCTION            1 (defaults)
     *               8 STORE_NAME               0 (p)
     *
     *  16          10 LOAD_NAME                0 (p)
     *              12 LOAD_CONST               3 (7)
     *              14 LOAD_CONST               0 (4)
     *              16 CALL_FUNCTION            2
     *              18 STORE_NAME               1 (result)
     *              20 LOAD_CONST               4 (None)
     *              22 RETURN_VALUE
     */
    new PyCode(0, 0, 0, 0, 3, 64,
        Py.bytes(100, 5, 100, 1, 100, 2, -124, 1, 90, 0, 101, 0, 100,
            3, 100, 0, -125, 2, 90, 1, 100, 4, 83, 0),
        Py.tuple(Py.val(4),
            /*
             *   3           0 LOAD_CONST               1 (<code object sum at 0x000001CED406C3A0, file "kwargprog_c", line 3>)
             *               2 LOAD_CONST               2 ('p.<locals>.sum')
             *               4 MAKE_FUNCTION            0
             *               6 STORE_FAST               2 (sum)
             *
             *   6           8 LOAD_CLOSURE             0 (i)
             *              10 LOAD_CLOSURE             1 (r)
             *              12 BUILD_TUPLE              2
             *              14 LOAD_CONST               3 (<code object diff at 0x000001CED406C500, file "kwargprog_c", line 6>)
             *              16 LOAD_CONST               4 ('p.<locals>.diff')
             *              18 MAKE_FUNCTION            8 (closure)
             *              20 STORE_FAST               3 (diff)
             *
             *  10          22 LOAD_CLOSURE             0 (i)
             *              24 LOAD_CLOSURE             1 (r)
             *              26 BUILD_TUPLE              2
             *              28 LOAD_CONST               5 (<code object prod at 0x000001CED406C5B0, file "kwargprog_c", line 10>)
             *              30 LOAD_CONST               6 ('p.<locals>.prod')
             *              32 MAKE_FUNCTION            8 (closure)
             *              34 STORE_FAST               4 (prod)
             *
             *  12          36 LOAD_CONST               7 (1)
             *              38 LOAD_DEREF               0 (i)
             *              40 LOAD_CONST               8 ('hello')
             *              42 LOAD_CONST               9 (('q', 'i', 'k'))
             *              44 BUILD_CONST_KEY_MAP      3
             *              46 STORE_FAST               5 (kw)
             *
             *  13          48 LOAD_FAST                2 (sum)
             *              50 LOAD_DEREF               1 (r)
             *              52 BUILD_TUPLE              1
             *              54 LOAD_CONST              10 (0)
             *              56 LOAD_CONST              11 ('world')
             *              58 LOAD_CONST              12 (('j', 'l'))
             *              60 BUILD_CONST_KEY_MAP      2
             *              62 LOAD_FAST                5 (kw)
             *              64 BUILD_MAP_UNPACK_WITH_CALL     2
             *              66 CALL_FUNCTION_EX         1
             *              68 STORE_FAST               6 (s)
             *
             *  14          70 LOAD_FAST                4 (prod)
             *              72 CALL_FUNCTION            0
             *              74 LOAD_FAST                6 (s)
             *              76 BINARY_ADD
             *              78 LOAD_FAST                3 (diff)
             *              80 CALL_FUNCTION            0
             *              82 BINARY_ADD
             *              84 RETURN_VALUE
             */
            new PyCode(2, 0, 0, 7, 5, 3,
                Py.bytes(100, 1, 100, 2, -124, 0, 125, 2, -121, 0,
                    -121, 1, 102, 2, 100, 3, 100, 4, -124, 8, 125, 3,
                    -121, 0, -121, 1, 102, 2, 100, 5, 100, 6, -124,
                    8, 125, 4, 100, 7, -120, 0, 100, 8, 100, 9, -100,
                    3, 125, 5, 124, 2, -120, 1, 102, 1, 100, 10, 100,
                    11, 100, 12, -100, 2, 124, 5, -105, 2, -114, 1,
                    125, 6, 124, 4, -125, 0, 124, 6, 23, 0, 124, 3,
                    -125, 0, 23, 0, 83, 0),
                Py.tuple(Py.None,
                    /*
                     *   4           0 LOAD_FAST                0 (r)
                     *               2 LOAD_FAST                3 (i)
                     *               4 BINARY_ADD
                     *               6 STORE_FAST               6 (mysum)
                     *
                     *   5           8 LOAD_FAST                6 (mysum)
                     *              10 RETURN_VALUE
                     */
                    new PyCode(2, 0, 2, 7, 2, 95,
                        Py.bytes(124, 0, 124, 3, 23, 0, 125, 6, 124,
                            6, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(),
                        Py.tuple(Py.str("r"), Py.str("q"),
                            Py.str("j"), Py.str("i"), Py.str("args"),
                            Py.str("kwargs"), Py.str("mysum")),
                        Py.tuple(),
                        Py.tuple(), Py.str("kwargprog_c"),
                        Py.str("sum"), 3,
                        Py.bytes(0, 1, 8, 1)),
                    Py.str("p.<locals>.sum"),
                    /*
                     *   7           0 LOAD_CLOSURE             0 (i)
                     *               2 LOAD_CLOSURE             1 (r)
                     *               4 BUILD_TUPLE              2
                     *               6 LOAD_CONST               1 (<code object q at 0x000001CED406C450, file "kwargprog_c", line 7>)
                     *               8 LOAD_CONST               2 ('p.<locals>.diff.<locals>.q')
                     *              10 MAKE_FUNCTION            8 (closure)
                     *              12 STORE_FAST               0 (q)
                     *
                     *   9          14 LOAD_FAST                0 (q)
                     *              16 CALL_FUNCTION            0
                     *              18 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 1, 3, 19,
                        Py.bytes(-121, 0, -121, 1, 102, 2, 100, 1,
                            100, 2, -124, 8, 125, 0, 124, 0, -125, 0,
                            83, 0),
                        Py.tuple(Py.None,
                            /*
                             *   8           0 LOAD_DEREF               1 (r)
                             *               2 LOAD_DEREF               0 (i)
                             *               4 BINARY_SUBTRACT
                             *               6 RETURN_VALUE
                             */
                            new PyCode(0, 0, 0, 0, 2, 19,
                                Py.bytes(-120, 1, -120, 0, 24, 0, 83,
                                    0),
                                Py.tuple(Py.None),
                                Py.tuple(),
                                Py.tuple(),
                                Py.tuple(Py.str("i"), Py.str("r")),
                                Py.tuple(), Py.str("kwargprog_c"),
                                Py.str("q"), 7,
                                Py.bytes(0, 1)),
                            Py.str("p.<locals>.diff.<locals>.q")),
                        Py.tuple(),
                        Py.tuple(Py.str("q")),
                        Py.tuple(Py.str("i"), Py.str("r")),
                        Py.tuple(), Py.str("kwargprog_c"),
                        Py.str("diff"), 6,
                        Py.bytes(0, 1, 14, 2)),
                    Py.str("p.<locals>.diff"),
                    /*
                     *  11           0 LOAD_DEREF               1 (r)
                     *               2 LOAD_DEREF               0 (i)
                     *               4 BINARY_MULTIPLY
                     *               6 RETURN_VALUE
                     */
                    new PyCode(0, 0, 0, 0, 2, 19,
                        Py.bytes(-120, 1, -120, 0, 20, 0, 83, 0),
                        Py.tuple(Py.None),
                        Py.tuple(),
                        Py.tuple(),
                        Py.tuple(Py.str("i"), Py.str("r")),
                        Py.tuple(), Py.str("kwargprog_c"),
                        Py.str("prod"), 10,
                        Py.bytes(0, 1)), Py.str("p.<locals>.prod"),
                    Py.val(1), Py.str("hello"),
                    Py.tuple(Py.str("q"), Py.str("i"), Py.str("k")),
                    Py.val(0), Py.str("world"),
                    Py.tuple(Py.str("j"), Py.str("l"))),
                Py.tuple(),
                Py.tuple(Py.str("r"), Py.str("i"), Py.str("sum"),
                    Py.str("diff"), Py.str("prod"), Py.str("kw"),
                    Py.str("s")),
                Py.tuple(),
                Py.tuple(Py.str("i"), Py.str("r")),
                Py.str("kwargprog_c"), Py.str("p"), 2,
                Py.bytes(0, 1, 8, 3, 14, 4, 14, 2, 12, 1, 22, 1)),
            Py.str("p"), Py.val(7), Py.None,
            Py.tuple(Py.val(4))),
        Py.tuple(Py.str("p"), Py.str("result")),
        Py.tuple(),
        Py.tuple(),
        Py.tuple(), Py.str("kwargprog_c"), Py.str("<module>"), 2,
        Py.bytes(10, 14));
    //@formatter:on

    // @Test
    void test_kwargprog_c1() {
        //@formatter:off
        PyDictionary globals = new PyDictionary();
        Interpreter interp = Py.createInterpreter();
        interp.evalCode(KWARGPROG_C, globals, globals);
        assertEquals(Py.val(42), globals.get("result"),
            "result == 42");
        //@formatter:on
    }

}
