/*
 * jy2bm subproject (the rt2 benchmarks applied to Jython 2).
 *
 * This sub-project is intended for comarison with the results of
 * the experimental run-time system. Direct equivalents do not exist
 * for the methods, but Jython 2's PyObject effectively provides the
 * abstract interface tested in rt2bm.
 */

plugins {
    id 'application'
}

dependencies {
    //implementation 'org.ow2.asm:asm:7.2'

    implementation 'org.python:jython-slim:2.7.2'
    implementation 'org.openjdk.jmh:jmh-core:1.26'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.26'
}

application {
    mainClass = 'org.openjdk.jmh.Main'
}


task jmh(type: JavaExec, description: 'JMH Help') {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.openjdk.jmh.Main'
    args '-h'
}


task lprof(type: JavaExec, description: 'JMH List profilers') {
    // Maybe need variants of this task with different filters
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.openjdk.jmh.Main'

    args '-lprof'
}


task unary(type: JavaExec, description: 'Unary operations') {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.openjdk.jmh.Main'

    // Need variants of this task with different filters
    // Trailing .* necessary!
    args '.*Unary.*'

    // jvmArgs '-Xint' // JVM options added like this
}


task binary(type: JavaExec, description: 'Binary operations') {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.openjdk.jmh.Main'

    // Need variants of this task with different filters
    // Trailing .* necessary!
    args '.*Binary.*'

    // jvmArgs '-Xint' // JVM options added like this
}


// Runs the "main loop" useful for exploring optimisation
task mainloop(type: JavaExec,
        description: 'Explore generated assembly language') {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'uk.co.farowl.jy2bm.MainLoop'

    // Show optimisation happening
    jvmArgs '-XX:+UnlockDiagnosticVMOptions'
    jvmArgs '-XX:+PrintInlining'
    jvmArgs '-XX:CompileCommand=dontinline,*PyFloatBinary.quartic'
    //jvmArgs '-XX:+PrintCompilation'

    // Disassembly requires hsdis-amd64.dll in Java bin directory
    //jvmArgs '-XX:+PrintAssembly'  // Everything (a lot)
    jvmArgs '-XX:CompileCommand=print,*PyFloatBinary.quartic'
}


