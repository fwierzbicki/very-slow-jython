/*
 * dy2bm subproject (invokedynamic benchmarks for rt2 & dy2).
 *
 * This sub-project builds an application that orchestrates 
 * microbenchmarks on the fundamental operations of the Python
 * run-time system as they might be when compiled for the JVM.
 */

plugins {
    id 'application'
}


dependencies {

    implementation project(path:':dy2')
    // ... and :rt2 transitively

    implementation 'org.openjdk.jmh:jmh-core:1.26'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.26'
}


application {
    mainClass = 'org.openjdk.jmh.Main'
}


task jmh(type: JavaExec, description: 'JMH Help') {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.openjdk.jmh.Main'
    args '-h'
}


compileJava {
    dependsOn(':dy2:generateDynamicAPI')

    // Diagnostic to confirm (primarily) that the path contains
    // .../dy2/build/classes/java/main
    doFirst {
        println "Task $name classpath:"
        classpath.forEach {
            File element -> println "    $element"
        }
    }

}


task lprof(type: JavaExec, description: 'JMH List profilers') {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.openjdk.jmh.Main'

    args '-lprof'
}


task unary(type: JavaExec, description: 'Unary operations') {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.openjdk.jmh.Main'

    // Need variants of this task with different filters
    // Trailing .* necessary!
    args '.*Unary.*'

    // jvmArgs '-Xint' // JVM options added like this
}


task binary(type: JavaExec, description: 'Binary operations') {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.openjdk.jmh.Main'

    // Need variants of this task with different filters
    // Trailing .* necessary!
    args '.*Binary.*'

    // jvmArgs '-Xint' // JVM options added like this
}

// Runs the "main loop" useful for exploring optimisation
task mainloop(type: JavaExec,
        description: 'Explore generated assembly language') {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'uk.co.farowl.vsj2dybm.evo4.MainLoop'

    // Show optimisation happening
    jvmArgs '-XX:+UnlockDiagnosticVMOptions'
    jvmArgs '-XX:+PrintInlining'
    jvmArgs '-XX:CompileCommand=dontinline,*PyFloatBinary.quartic'
    //jvmArgs '-XX:+PrintCompilation'

    // Disassembly requires hsdis-amd64.dll in Java bin directory
    //jvmArgs '-XX:+PrintAssembly'  // Everything (a lot)
    // Just the method exhibiting the optimisation hoped for
    jvmArgs '-XX:CompileCommand=print,*PyFloatBinary.quartic'
}
