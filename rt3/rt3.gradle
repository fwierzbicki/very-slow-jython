/*
 * rt3 subproject (model interpreter runtime to test our ideas).
 */

plugins {
    id 'java-library'
}

// Our locally-rolled class-generator
import uk.co.farowl.vsj3.generate.evo1.DynamicAPIevo1Task


dependencies {
    implementation 'org.ow2.asm:asm:9.0'

    // JUnit 5 dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}


def genOutputDir = "$buildDir/generated/sources/javaTemplate"
def genJavaDir = "$genOutputDir/java/main"
def genTestJavaDir = "$genOutputDir/java/test"

def genInputDir = getProject().file('src/main/javaTemplate')
def genTestInputDir = getProject().file('src/main/javaTemplate')


sourceSets {

    main {
        java {
            srcDir genJavaDir
        }
    }

    test {
        java {
            srcDir genTestJavaDir
        }
    }
}


class PythonGenerate extends Exec {

    PythonGenerate() {
        executable 'python'
        environment('PYTHONPATH',
                getProject().file('tools/python/lib'))
    }
}


test {
    useJUnitPlatform {  // JUnit5 as standard
        includeEngines 'junit-jupiter'
    }
}


// Generate Python object definitions
task generateJavaEvo1(type: PythonGenerate,
        description: 'Generate object definitions from templates' ) {
    args getProject().file('tools/python/vsj3evo1/java_object_gen.py')
    args '--verbose'
    args genInputDir
    args genJavaDir
}
compileJava.dependsOn(generateJavaEvo1)


task pythonVersion(type: Exec) {
    executable 'python'
    args '-V'
}


// Generate (selected) Python abstract object API members
// Task defined in root buildSrc
task generateDynamicAPIevo1(type: DynamicAPIevo1Task) {
    source = "src/main/dynamicAPI"
    // Mix output into Java plugin directory :(
    destinationDir = file("$buildDir/classes/java/main")
    // Must be set but not actually consulted :(
    classpath = layout.files("$buildDir/classes/java/main")
}
classes.dependsOn(generateDynamicAPIevo1)


// Some adjustments to Javadoc to ensure complex tables readable

tasks.withType(Javadoc) {

    options.showFromPackage()

    // addStringOption inserts one "-" for us :/
    // CSS adjustments (initially only for table style)
    options.addStringOption("-add-stylesheet",
        "src/main/javadoc/project-styles.css")

    // Enable "custom" tags used in JDK Javadoc since JSR-335.
    // https://nipafx.dev/javadoc-tags-apiNote-implSpec-implNote
    options.tags(
        "apiNote:a:API Note:",
        "implSpec:a:Implementation Requirements:",
        "implNote:a:Implementation Note:",
        // Unfortunately we must add these standard tags too,
        // so they come after the ones we want to enable.
        "param", "return", "throws",
        "since", "version", "serialData", "see")
}


tasks.withType(JavaCompile) {

    // deprecation is noisy
    options.deprecation = true
    // retain parameter names (for use by exposer)
    options.compilerArgs.add('-parameters')
}
