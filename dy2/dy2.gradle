/*
 * dy2 subproject (simple use of invokedynamic).
 *
 * The output of this project is a set of classes equivalent to certain
 * Abstract API methods in the run-time system. These equivalents are
 * generated with ASM and use invokedynamic instructions and call sites.
 * The theory is that these offer HotSpot the chance to in-line
 * optimised operations.
 *
 * This project aims to get them correct. Project dy2bm tests the theory
 * using micro-benchmarks.
 */

plugins {
    id 'java-library'
}

// Our locally-rolled class-generator
import uk.co.farowl.vsj2dy.generate.DynamicAPITask


dependencies {

    api project(':rt2')

    // JUnit 5 dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}


// Task defined in root buildSrc
task generateDynamicAPI(type: DynamicAPITask) {
    source = "src/main/dynamicAPI"
    // Mix output into Java plugin directory :(
    destinationDir = file("$buildDir/classes/java/main")
    // Must be set but not actually consulted :(
    classpath = layout.files("$buildDir/classes/java/main")

    doFirst {
        println "Task $name outputs:"
        outputs.files.forEach {
            element -> println "    $element"
        }
    }
}
classes.dependsOn(generateDynamicAPI)

artifacts {
    apiElements(generateDynamicAPI.destinationDirectory)
}


// Ensure the output of generateDynamicAPI gets into the JAR
jar {
    from generateDynamicAPI
}


